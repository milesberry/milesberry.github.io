<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
<title type="text">An open mind</title>
<subtitle type="text">A personal perspective on education, technology and culture</subtitle>
<generator uri="https://github.com/mojombo/jekyll">Jekyll</generator>
<link rel="self" type="application/atom+xml" href="/feed.xml" />
<link rel="alternate" type="text/html" href="" />
<updated>2017-01-05T06:51:02+00:00</updated>
<id>/</id>
<author>
  <name>Miles Berry</name>
  <uri>/</uri>
  <email>m.berry@roehampton.ac.uk</email>
</author>


<entry>
  <title type="html"><![CDATA[The Roehampton Annual Computing Education Report 2015]]></title>
  <link rel="alternate" type="text/html" href="/2016/12/the-roehampton-annual-computing-education-report-2015/" />
  <id>/2016/12/the-roehampton-annual-computing-education-report-2015</id>
  <published>2016-12-21T16:03:34+00:00</published>
  <updated>2016-12-21T16:03:34+00:00</updated>
  <author>
    <name>Miles Berry</name>
    <uri></uri>
    <email>m.berry@roehampton.ac.uk</email>
  </author>
  <content type="html">&lt;p style=&quot;color: #1e1e1e;&quot;&gt;
  &lt;a href=&quot;http://bit.ly/TRACER15&quot;&gt;This report&lt;/a&gt; aims to analyse the uptake of computing / computer science qualifications at GCSE and A-level by looking at the schools that offered the qualifications and the students sitting them in 2015. Below are the key findings.
&lt;/p&gt;

&lt;h2 id=&quot;key-findings&quot; style=&quot;color: #1e1e1e;&quot;&gt;
  Key Findings
&lt;/h2&gt;

&lt;p style=&quot;color: #1e1e1e;&quot;&gt;
  Despite computing’s place on the national curriculum as a foundation subject, only a minority of schools (28.5%) entered pupils for GCSE computing in 2015. At A-level, only 24% of providers entered students for the qualification. Provision of GCSE and A-level computing varied significantly across the country:
&lt;/p&gt;

&lt;ul style=&quot;color: #1e1e1e;&quot;&gt;
  &lt;li&gt;
    There were 9 Local Authorities (LAs) where less than 2% of students took GCSE computing. At the other end of the scale, there were six (Reading, Blackpool, Newham, Sefton, Bournemouth and West Berkshire) where more than 10% of students are entered.
  &lt;/li&gt;
  &lt;li&gt;
    6.5% of students in the South East sat computing GCSE, compared to only 4.2% in the North East.
  &lt;/li&gt;
  &lt;li&gt;
    Seven LAs had no A-level entries for computing. On the other hand, there were 5 LAs, (Poole, Bury, Hartlepool, Middlesbrough and Stockton-On-Tees) where more than 4% of students took A-level computing.
  &lt;/li&gt;
  &lt;li&gt;
    2.1% of students in the North West sat computing at A-level, compared to just 1.1% in Yorkshire and the Humber.
  &lt;/li&gt;
  &lt;li&gt;
    Urban schools were more likely to offer computing at GCSE or A-level than those in rural locations (29.5% vs 22.7% and 25.1% vs 18.1% respectively).
  &lt;/li&gt;
  &lt;li&gt;
    There was no significant difference between coastal and inland schools in provision of computing at GCSE or A-level.
  &lt;/li&gt;
&lt;/ul&gt;

&lt;figure&gt;
	&lt;img src=&quot;/wp-content/uploads/2016/12/Screen-Shot-2016-12-21-at-16.04.57.png&quot; /&gt;
 	&lt;figcaption&gt;English schools entering students for GCSE computing, 2015&lt;/figcaption&gt;
 &lt;/figure&gt;

&lt;p style=&quot;color: #1e1e1e;&quot;&gt;
  There was considerable variation between school types in entries for GCSE and A-level computing:
&lt;/p&gt;

&lt;ul style=&quot;color: #1e1e1e;&quot;&gt;
  &lt;li&gt;
    51.1% of academy converters offered GCSE computing, compared to 37.8% of community schools, 37.1% of foundation schools, 35.2% of sponsor led academies and 34.8% of voluntary aided schools. Only 14.1% of independent schools and 2% of special schools offered GCSE computing.
  &lt;/li&gt;
  &lt;li&gt;
    At A-level, 41% of further education institutions (including sixth form colleges) offered computing. 31.6% of Academy converters also offered A-level computing. Just 15.9% of independent schools did so.
  &lt;/li&gt;
  &lt;li&gt;
    Boys and mixed schools were more likely to offer computing than girls schools. At GCSE 19.6% of girls-only providers offered computing compared to 31.6% of boys-only and 29.1% of mixed providers. 9.3% of girls-only providers offered computing at A-level compared to 43.7% of boys-only and 24.5% of mixed providers.
  &lt;/li&gt;
  &lt;li&gt;
    Grammar schools were much more likely to offer computing than non-selective state schools: 53.1% compared to 31.7% of schools at GCSE, and 46% compared to 24.7% at A Level.
  &lt;/li&gt;
  &lt;li&gt;
    School size was linked closely with the likelihood that computing GCSE be offered, although the same is true for other subjects, such as physics and ICT.
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p style=&quot;color: #1e1e1e;&quot;&gt;
  At GCSE, it was very unusual for computing to be taken by the majority of students in a year group &amp;#8211; there were only twenty-one schools where this was the case, seven of which were independent schools. Nevertheless, cohort sizes at GCSE might be considered robust, averaging 22.9. 47.6% of schools offering computing did so with groups smaller than 20 at GCSE. At A-level, cohort sizes were much smaller, with a mean of 7 and a median of just 4. 58.5% of A-level computing providers had fewer than 6 entries. The average cohort size for further education institutions (including sixth form colleges) that offer A-level computing was 18.5, but academy converters offering the subject had an average cohort size of just 5.7 . If the number of students taking computing A-level in many of these providers does not increase then questions are likely to be raised over the economic viability of the qualification due to recent sixth form provision funding changes. Where computing provision did exist in mixed schools, girls were often absent. At GCSE 26.9% of mixed providers had no female students, at A-level the figure was 65.3%.
&lt;/p&gt;

&lt;p style=&quot;color: #1e1e1e;&quot;&gt;
  The entitlement to computing which the national curriculum provides did not appear to be maintained at GCSE or A-level. Only a small fraction of pupils chose (and/or were allowed) to take qualifications in computing: 5.5% of GCSE students and only 1.7% of A-level candidates. As with schools’ take up of the qualification, so with individual students’: there is considerable variation between gender, socio-economic status and ethnicity.
&lt;/p&gt;

&lt;ul style=&quot;color: #1e1e1e;&quot;&gt;
  &lt;li&gt;
    Pupil premium students were under-represented in GCSE computing (19%, compared to 26.6% across GCSE entries); entrants had a lower &lt;a href=&quot;https://www.gov.uk/government/statistics/english-indices-of-deprivation-2015&quot;&gt;IDACI&lt;/a&gt; index than the average (0.194 vs 0.218). Pupil premium students, on average, scored worse than their peers.
  &lt;/li&gt;
  &lt;li&gt;
    At A-level, pupil premium students’ uptake of computing was close to the average for all subjects (8.9%, compared to 9.0% across A-level entries), although the IDACI score was still lower (0.161 vs 0.178). The attainment gap between pupil premium and non-pupil premium students for computing was broadly the same as across all subjects. Only 34 pupil premium girls took A-level computing in 2015.
  &lt;/li&gt;
  &lt;li&gt;
    Asian and Chinese students were a higher proportion of GCSE computing students than across the national cohort; black students somewhat lower. At A-level, white and Chinese students made up a higher proportion of the computing cohort, other ethnic groups rather lower.
  &lt;/li&gt;
  &lt;li&gt;
    Whilst pupil premium students were less likely to sit GCSE computing than their peers, the propensity of girls to sit computing was not as reduced by pupil premium as it was for their male counterparts. Amongst all pupil premium groupings, white British girls were proportionally underrepresented.
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p style=&quot;color: #1e1e1e;&quot;&gt;
  At GCSE computing, girls outperformed boys, achieving proportionally more A* to B grades, and proportionally fewer other grades. A-level shows a similar pattern to GCSE, with girls, achieving proportionally more A* to B grades, and proportionally fewer other grades.
&lt;/p&gt;

&lt;figure&gt;
&lt;img src=&quot;/wp-content/uploads/2016/12/Screen-Shot-2016-12-21-at-16.17.47.png&quot; /&gt;
&lt;figcaption&gt;Computing GCSE grades by gender, 2015
&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p style=&quot;color: #1e1e1e;&quot;&gt;
  Computing students might be characterised as relatively academic, although performance on exams is rather lower than might be expected given the entry profile. It is unclear whether this is due to the relative difficulty of the qualification, teaching in the subject or some combination of these and other factors. Computing and ICT seem rather different qualifications:
&lt;/p&gt;

&lt;ul style=&quot;color: #1e1e1e;&quot;&gt;
  &lt;li&gt;
    At GCSE and A-level, ICT has a much more equitable gender spread than computing.
  &lt;/li&gt;
  &lt;li&gt;
    At GCSE, 1433 providers offered computing, which was taken by 32820 students, compared to 1886 providers offering ICT, taken by 93015 students.
  &lt;/li&gt;
  &lt;li&gt;
    At A-level, 697 providers offered computing, which was taken by 4890 students, compared to 804 providers offering ICT, taken by 6650 students. Larger sixth form or FE colleges are more likely to offer A-level Computing rather than ICT, perhaps as the ICT qualification offered in such institutions is more likely to be one of the vocational alternatives.
  &lt;/li&gt;
  &lt;li&gt;
    3167 students (9.6% of the computing cohort) took GCSEs in both computing and ICT. 156 students (3.2% of the computing cohort) took both computing and ICT at A-level, a combination offered by only 240 (8.3%) of providers.
  &lt;/li&gt;
  &lt;li&gt;
    Computing students were more likely to take triple science than ICT students at GCSE: Only 1126 students took computing as one of three EBacc sciences (3.4% of computing entries), although a further 10849 (33.1%) took computing as one of four science subjects.
  &lt;/li&gt;
  &lt;li&gt;
    At A-level, computing was often combined with maths, further maths and physics &amp;#8211; the latter two were subjects which did not feature highly in combination with ICT.
  &lt;/li&gt;
  &lt;li&gt;
    Asian students had similar representation at both GCSE ICT and computing, but at A-level they had a much higher representation in ICT.
  &lt;/li&gt;
  &lt;li&gt;
    Pupil premium students were substantially under-represented in GCSE computing (19%) compared to ICT (27.1%). The student average IDACI rating for students sitting computing (0.194) was substantially below that for ICT (0.233).
  &lt;/li&gt;
  &lt;li&gt;
    At A-level, the percentage of pupil premium students for computing (8.9%) was below ICT (11%) and the student average IDACI rating for students sitting computing (0.161) was substantially below ICT (0.195).
  &lt;/li&gt;
  &lt;li&gt;
    Students sitting GCSE computing had a stronger mathematics profile than students studying ICT.
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;recommendations&quot; style=&quot;color: #1e1e1e;&quot;&gt;
  Recommendations
&lt;/h2&gt;

&lt;ul style=&quot;color: #1e1e1e;&quot;&gt;
  &lt;li&gt;
    Increase the proportion of schools and colleges offering GCSE and A-level computing. &lt;ul&gt;
      &lt;li&gt;
        This can be achieved through applying models of provision in areas and school types where computing is well represented to those where it is presently under-represented.
      &lt;/li&gt;
      &lt;li&gt;
        Initiatives such as &lt;a href=&quot;https://www.raspberrypi.org/picademy/&quot;&gt;PiCademy&lt;/a&gt;, the &lt;a href=&quot;http://www.computingatschool.org.uk/custom_pages/36&quot;&gt;CAS master teacher programme&lt;/a&gt;, &lt;a href=&quot;http://community.computingatschool.org.uk/hubs&quot;&gt;CAS hubs&lt;/a&gt; and the &lt;a href=&quot;http://www.computingatschool.org.uk/crcs&quot;&gt;CAS regional centres&lt;/a&gt; should prioritise extending support to areas and schools with low levels of provision.
      &lt;/li&gt;
      &lt;li&gt;
        National teacher training initiatives, such as Teach First, should look at focusing their computing provision in areas of low provision.
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;

  &lt;li&gt;
    Schools and colleges offering computing should aim to expand the numbers of pupils and students taking the qualification. &lt;ul&gt;
      &lt;li&gt;
        This can be achieved through addressing the relative under-representation of girls, some ethnic groups and, in the case of GCSE, pupil-premium students. Schools and colleges should consider carefully if selection policies for computing classes are unnecessarily restrictive or discriminatory.
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;

  &lt;li&gt;
    Schools should consider if changes are needed in the teaching of computing to bring outcomes in line with those which entry profiles would indicate.
  &lt;/li&gt;
  &lt;li&gt;
    Awarding organisations should consider whether qualifications on offer are sufficiently appealing to pupils and to schools and colleges. They should consider whether grade expectations are in line with other qualifications they offer.
  &lt;/li&gt;
  &lt;li&gt;
    Whilst the new computing curriculum is being established, there should be financial support for schools to offer the subject so they can build up sustainable cohort sizes.
  &lt;/li&gt;
  &lt;li&gt;
    Discussions around diversity and computing should include socio-economic and ethnic factors in addition to gender.
  &lt;/li&gt;
  &lt;li&gt;
    The impact resulting from&lt;a href=&quot;https://www.gov.uk/government/uploads/system/uploads/attachment_data/file/473195/Further_additional_GCSE_and_A_level_subject_content_consultation.pdf&quot;&gt; the removal of ICT qualifications at KS4 and KS5&lt;/a&gt; needs to be studied. Will students with profiles similar to those taking ICT in 2015 now sit Computer Science in similar numbers, find alternative provision through vocational qualifications, or will they show decreased access to qualifications in the IT / computer science space?
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p style=&quot;color: #1e1e1e;&quot;&gt;
  The research topics outlined in this report need further study, in particular there seems a pressing need to explore:
&lt;/p&gt;

&lt;ul style=&quot;color: #1e1e1e;&quot;&gt;
  &lt;li&gt;
    the uptake of GCSE computing amongst pupil premium females.
  &lt;/li&gt;
  &lt;li&gt;
    the regional distribution of computing provision across other factors such as gender and pupil premium.
  &lt;/li&gt;
  &lt;li&gt;
    factors that might explain under-performance in computing.
  &lt;/li&gt;
  &lt;li&gt;
    the uptake of other qualifications in the IT, digital media and computer science at at pre-university level.
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p style=&quot;padding-left: 30px;&quot;&gt;
  &lt;em&gt;This is the executive summary of &lt;a href=&quot;http://bit.ly/TRACER15&quot;&gt;The Roehampton Annual Computing Education Report 2015&lt;/a&gt;, published 13 December 2016.&lt;/em&gt;
&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;/2016/12/the-roehampton-annual-computing-education-report-2015/&quot;&gt;The Roehampton Annual Computing Education Report 2015&lt;/a&gt; was originally published by Miles Berry at &lt;a href=&quot;&quot;&gt;An open mind&lt;/a&gt; on December 21, 2016.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Making Change]]></title>
  <link rel="alternate" type="text/html" href="/2016/11/making-change/" />
  <id>/2016/11/making-change</id>
  <published>2016-11-30T15:40:14+00:00</published>
  <updated>2016-11-30T15:40:14+00:00</updated>
  <author>
    <name>Miles Berry</name>
    <uri></uri>
    <email>m.berry@roehampton.ac.uk</email>
  </author>
  <content type="html">&lt;p&gt;It’s a seemingly easy problem: how to make a certain amount of money using the smallest number of coins possible. For example, 42p needs three coins: a couple of twenty pence pieces and a 2p coin. It’s something that comes up on the maths national curriculum:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Y3: Pupils continue to become fluent in recognising the value of coins, by …  giving change using manageable amounts.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It’s also something that machines need to be programmed to do – from snack vending machines to automated checkouts. The lesson here looks at how a computer could be programmed to give arbitrary amounts of change.&lt;/p&gt;

&lt;h2 id=&quot;objectives&quot;&gt;Objectives&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Practice working out the smallest set of coins to give change&lt;/li&gt;
  &lt;li&gt;Work out an &lt;strong&gt;algorithm&lt;/strong&gt; for giving change and check this works&lt;/li&gt;
  &lt;li&gt;Use &lt;strong&gt;sequence&lt;/strong&gt;, &lt;strong&gt;repetition&lt;/strong&gt;, &lt;strong&gt;variables&lt;/strong&gt; and &lt;strong&gt;input&lt;/strong&gt; and &lt;strong&gt;output&lt;/strong&gt; to program this using a block-based language such as Scratch&lt;/li&gt;
  &lt;li&gt;Test and &lt;strong&gt;debug&lt;/strong&gt; the program&lt;/li&gt;
  &lt;li&gt;Look for ways to improve the program using &lt;strong&gt;patterns.&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;starter&quot;&gt;Starter&lt;/h2&gt;

&lt;p&gt;Check pupils’ knowledge of coins by making sure the class know all the standard UK coins. Pupils who’ve been abroad might like to discuss the coinage systems in other countries.&lt;/p&gt;

&lt;p&gt;Get pupils thinking about the problem of making change by asking quick-fire questions, ranging from the easy (What coins make 13p?) to the more challenging (What coins make 48p? What coins make £2.88?). Do pupils’ answers use the &lt;em&gt;smallest&lt;/em&gt; number of possible coins?&lt;/p&gt;

&lt;h2 id=&quot;main-activities&quot;&gt;Main activities&lt;/h2&gt;

&lt;p&gt;Start with computational thinking before getting on to any hands-on coding work. Explain that lots of machines have to solve the problem of making change: what machines can pupils think of that might need to do this? Why might it be annoying if the machines didn’t give the smallest number of coins?&lt;/p&gt;

&lt;p&gt;To program machines to do this, we first need to think of an algorithm – the sequence of steps – that would solve this problem. Get pupils to work with a partner to brainstorm ideas for their algorithm, encouraging them to write these down. Pupils should test each other’s algorithms, working through the steps they’ve listed. Do they work for any amount of money? If not, pupils will need to refine their ideas.&lt;/p&gt;

&lt;p&gt;A typical algorithm might be:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Start with the total amount, and no coins in the change.&lt;/li&gt;
  &lt;li&gt;Repeat until amount left is less than £2:
    &lt;ul&gt;
      &lt;li&gt;Subtract £2 from the amount; add £2 to the change.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Repeat until amount left is less than £1:
    &lt;ul&gt;
      &lt;li&gt;Subtract £1 from the amount; add £1 to the change.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Repeat until amount left is less than 50p:
    &lt;ul&gt;
      &lt;li&gt;Subtract 50p from the amount; add 50p to the change.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Repeat until amount left is less than 20p:
    &lt;ul&gt;
      &lt;li&gt;Subtract 20p from the amount; add 20p to the change.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Repeat until amount left is less than 10p:
    &lt;ul&gt;
      &lt;li&gt;Subtract 10p from the amount; add 10p to the change.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Repeat until amount left is less than 5p:
    &lt;ul&gt;
      &lt;li&gt;Subtract 5p from the amount; add 5p to the change.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Repeat until amount left is less than 2p:
    &lt;ul&gt;
      &lt;li&gt;Subtract 2p from the amount; add 2p to the change.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Repeat until amount left is less than 1p:
    &lt;ul&gt;
      &lt;li&gt;Subtract 1p from the amount; add 1p to the change.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Point out a couple of things about this algorithm to your pupils. Firstly, that this is what we call a ‘greedy’ algorithm: at each step we take off the largest amount we can. Secondly, there’s a pattern here, and that’s something which we might be able to use if we wanted to write our algorithm in a clearer or more compact.&lt;/p&gt;

&lt;p&gt;Once pupils have an algorithm that works, either their own or one you’ve shared with them, they can program this into Scratch (or another programming language). You’ll need to explain a few ideas here, or just remind them of these. You might like to give them a partially complete program (e.g. &lt;a href=&quot;http://scratch.mit.edu/projects/123787916/#editor&quot;&gt;one that works for only 1p, 2p and 5p coins&lt;/a&gt;) and ask them to complete it:&lt;/p&gt;

&lt;figure&gt;
 	&lt;img src=&quot;/wp-content/uploads/2016/12/prog1.png&quot; /&gt;
 	&lt;figcaption&gt;Making change with 1p, 2p and 5p coins&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Or you could walk through the steps as a class, or you could just remind them of a few key ideas: it depends on how much experience your pupils have already.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;We’ll need a couple of variables to keep track of the amount left and the number of coins so far, so in &lt;a href=&quot;http://scratch.mit.edu&quot;&gt;Scratch&lt;/a&gt;, click the orange palette and create a couple of variables, say ‘amount’ and ‘coins’. Drag set coins to 0 into the script window to initialise this.&lt;/li&gt;
  &lt;li&gt;To initialise the amount, we’ll use keyboard input from our user, so on the blue sensing palette use the ‘ask… and wait’ block to prompt the user for an amount of money, and then use then set our amount variable to the answer they give.&lt;/li&gt;
  &lt;li&gt;For each of the possible coins we’ll give in change, the pattern will be the same: use a repeat until block to check if the amount is less than the value of the coin (say 200 in the first case). Inside the block, change the amount variable by the value of the coin, i.e. -200 in this case, and increase the coins variable by 1. It’s nice to output something on screen here, so use a say block from the purple palette to say ‘Here’s a £2 coin’ or something like this for a second or so. You, or your pupils, then just need to follow the same pattern for all the other coins, until you get down to 1p.&lt;/li&gt;
  &lt;li&gt;The last bit of the program should be to say how many coins were given in total, combining the purple say for and the orange coins variable block.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Provide pupils with the time to work through this. Having pupils work with a partner can be a really effective approach, both to writing code and to learning to write code.&lt;/p&gt;

&lt;p&gt;Make sure pupils test their programs for different starting amounts, and do give pupils some strategies for debugging their code if things don’t go to plan – one approach is to put themselves in the place of the computer, carrying out the program ‘by hand’.&lt;/p&gt;

&lt;p&gt;There’s &lt;a href=&quot;http://scratch.mit.edu/projects/123785554/#editor%20&quot;&gt;a simple solution to the problem online&lt;/a&gt; which you’re free to remix and / or share with your pupils.&lt;/p&gt;

&lt;figure&gt;
 	&lt;img src=&quot;/wp-content/uploads/2016/12/prog2.png&quot; width=&quot;350&quot; /&gt;
 	&lt;figcaption&gt;One solution to change making in Scratch&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;Extension ideas&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Can pupils improve their program, making it clearer or more elegant? Using so many &lt;em&gt;similar&lt;/em&gt; repeating blocks suggests a couple of ways to make this better: one would be to use would be to break out the blocks that are repeated here into &lt;a href=&quot;scratch.mit.edu/projects/124133028/#editor&quot;&gt;custom (purple) blocks in Scratch&lt;/a&gt;, another would be to use &lt;em&gt;lists&lt;/em&gt; of possible coins, and perhaps &lt;a href=&quot;scratch.mit.edu/projects/115112039/#editor&quot;&gt;keep a list of the coins we’ve given in change&lt;/a&gt;.&lt;/p&gt;

&lt;figure&gt;
 	&lt;img src=&quot;/wp-content/uploads/2016/12/prog3.png&quot; /&gt;
 	&lt;figcaption&gt;A more elegant, list based solution&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Our greedy algorithm here can break down in odd coinage systems (for example, use a coinage system with 25p, 20p, 10p and 5p coins to make change for 40p). You could challenge pupils to experiment with their program to see if they could find coinage systems where the algorithm &lt;em&gt;didn’t&lt;/em&gt; work.&lt;/p&gt;

&lt;p&gt;A much harder activity is to work out how many &lt;em&gt;possible&lt;/em&gt; ways there are to make a given amount of change: for example there are 451 ways to make 50p using UK coinage!&lt;/p&gt;

&lt;p style=&quot;padding-left: 30px;&quot;&gt;
  &lt;em&gt;The above lesson plan was published in the November 2016 edition of Teach Primary from &lt;a href=&quot;http://www.teachwire.net/&quot;&gt;Teachwire&lt;/a&gt;. © all rights reserved.&lt;/em&gt;
&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;/2016/11/making-change/&quot;&gt;Making Change&lt;/a&gt; was originally published by Miles Berry at &lt;a href=&quot;&quot;&gt;An open mind&lt;/a&gt; on November 30, 2016.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Computational thinking and mathematical reasoning]]></title>
  <link rel="alternate" type="text/html" href="/2016/11/computational-thinking-and-mathematical-reasoning/" />
  <id>/2016/11/computational-thinking-and-mathematical-reasoning</id>
  <published>2016-11-27T16:39:05+00:00</published>
  <updated>2016-11-27T16:39:05+00:00</updated>
  <author>
    <name>Miles Berry</name>
    <uri></uri>
    <email>m.berry@roehampton.ac.uk</email>
  </author>
  <content type="html">&lt;p class=&quot;p1&quot; style=&quot;padding-left: 30px;&quot;&gt;
  &lt;em&gt;Andrew Csizmadia and I presented on Computing: the silent C in STEM at a CIDREE expert group of STEM curriculum developers in Utrecht last week. Here&amp;#8217;s an extract of our paper, exploring the connections between computational thinking and mathematical reasoning.&lt;/em&gt;
&lt;/p&gt;

&lt;p class=&quot;p1&quot;&gt;
  From primary school onwards, children’s arithmetic has two quite distinct stages: thinking about the question, and then working out the answer. A sum as simple as 23 + 39 demands that the child be able to decode these symbols in some meaningful way and determine which algorithm to bring to bear in order to calculate the answer: then, and only then, can the child go on to working out the answer. When faced with a word problem, for example, how much change will I receive from a 5 pound note if I buy three apples each costing 40 pence, the same two stages apply, this time demanding a degree of abstraction as the child moves from the particular context to its mathematical representation, in this case 5 &amp;#8211; 3 x 0.40.
&lt;/p&gt;

&lt;p class=&quot;p2&quot;&gt;
  &lt;span class=&quot;s1&quot;&gt;More generally, we might see that most, indeed perhaps all, mathematics mirrors these two stages &amp;#8211; thinking about problems and then manipulating symbols according to rules (i.e. a more sophisticated version of working things out). The formalist view of mathematics is that mathematics consists of the consequences of certain string manipulation rules: for example Euclidean geometry can be thought of as those statements which can be formed by manipulating geometric axioms according to the laws of inference. However, even within this formalist paradigm, practical, useful mathematics demands some thinking about which particular manipulations of strings will take us towards the solution of the problem facing us.&lt;/span&gt;
&lt;/p&gt;

&lt;p class=&quot;p2&quot;&gt;
  &lt;span class=&quot;s1&quot;&gt;This view of mathematics as symbol manipulation lies at the foundation of computing. Up until the 1940s, &lt;i&gt;computer&lt;/i&gt; was a job title &amp;#8211; given to those paid to do arithmetic on paper or mechanical calculators according to the rules and procedures given them by their managers. Turing expressed this symbol manipulation view of mathematics in his seminal paper, &lt;a href=&quot;https://www.cs.virginia.edu/~robins/Turing_Paper_1936.pdf&quot;&gt;&lt;span class=&quot;s2&quot;&gt;‘On computable numbers, with an application to the Entscheidungsproblem’&lt;/span&gt;&lt;/a&gt;, defining computable numbers as those which could be written down by a machine and generalising this to computable functions and computable predicates: it is on this work (and the &lt;a href=&quot;http://www.ics.uci.edu/~lopes/teaching/inf212W12/readings/church.pdf&quot;&gt;&lt;span class=&quot;s2&quot;&gt;parallel work of Alonzo Church&lt;/span&gt;&lt;/a&gt;) that computer science is founded, and thus the strong connections between mathematics and computer science, from primary school level up should not surprise us.&lt;/span&gt;
&lt;/p&gt;

&lt;p class=&quot;p2&quot;&gt;
  &lt;span class=&quot;s1&quot;&gt;In the decades since Turing’s and Church’s work, mathematics, as with so many other fields, has been transformed by digital computing. The symbol-manipulation (or working out) phase of the mathematics done in science, finance, social sciences, the arts and every other domain (other than education) is done now by digital computers, rather than by people, as Conrad Wolfram explains in &lt;a href=&quot;http://www.ted.com/talks/conrad_wolfram_teaching_kids_real_math_with_computers&quot;&gt;&lt;span class=&quot;s2&quot;&gt;his TED talk&lt;/span&gt;&lt;/a&gt;. Indeed much of the symbol manipulation of even pure mathematics is now often done by digital computers rather than mathematicians, or their research assistants, themselves (see, e.g., Appel and Haken’s computer-assisted &lt;/span&gt;&lt;a href=&quot;http://projecteuclid.org/download/pdf_1/euclid.ijm/1256049011&quot;&gt;&lt;span class=&quot;s3&quot;&gt;proof of the Four-Colour Theorem&lt;/span&gt;&lt;/a&gt;&lt;span class=&quot;s1&quot;&gt;.)&lt;/span&gt;
&lt;/p&gt;

&lt;p class=&quot;p2&quot;&gt;
  &lt;span class=&quot;s1&quot;&gt;The first phase of mathematics &amp;#8211; thinking about the problem or the system &amp;#8211; remains largely unchanged. Creative and imaginative problem solving lies at the heart of mathematics. Polya suggested four principles for problem solving: understand the problem, devise a plan, carry out the plan and look back, plus a number of associated heuristics.&lt;/span&gt;
&lt;/p&gt;

&lt;figure&gt;
&lt;img src=&quot;http://4.bp.blogspot.com/-rW8XSQOyupo/UZEYSQrmuWI/AAAAAAAABiA/LlKtkGtPUA0/s1600/how-to-solve-it_Polya.jpg&quot; /&gt;
&lt;figcaption&gt;Polya: how to solve it&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p class=&quot;p2&quot;&gt;
  &lt;span class=&quot;s4&quot;&gt;&lt;a href=&quot;https://www.computerbasedmath.org/assets/img/case-for-computer-based-math-education/CBM_brochure.pdf&quot;&gt;Wolfram&lt;/a&gt;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt; argues convincingly that this is what mathematics education should now focus on, given that actual computation is now done by machines, and suggests his own four-stage helix for problem solving: define questions, translate to maths, computer answers and interpret. There are parallels here with the development process in software engineering: specification, design, implementation and testing.&lt;/span&gt;
&lt;/p&gt;

&lt;figure&gt;
&lt;img src=&quot;https://www.computerbasedmath.org/assets/img/case-for-computer-based-math-education/CBMManMovie.gif&quot; /&gt;
&lt;figcaption&gt;Computer Based Math&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p class=&quot;p2&quot;&gt;
  &lt;span class=&quot;s1&quot;&gt;It would be wrong to think of school mathematics as being confined to manual computation. Problem solving and mathematical reasoning is an essential part of mathematics education. For example, the &lt;a href=&quot;https://www.gov.uk/government/collections/national-curriculum&quot;&gt;&lt;span class=&quot;s2&quot;&gt;English National Curriculum&lt;/span&gt;&lt;/a&gt; aims to ensure that all pupils:&lt;/span&gt;
&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p class=&quot;p4&quot;&gt;
  &lt;span class=&quot;s1&quot;&gt;&lt;i&gt;reason mathematically by following a line of enquiry, conjecturing relationships and generalisations, and developing an argument, justification or proof using mathematical language; and&lt;/i&gt;&lt;/span&gt;
&lt;/p&gt;

  &lt;p class=&quot;p4&quot;&gt;
  &lt;span class=&quot;s1&quot;&gt;&lt;i&gt;can solve problems by applying their mathematics to a variety of routine and non-routine problems with increasing sophistication, including breaking down problems into a series of simpler steps and persevering in seeking solutions.&lt;/i&gt;&lt;/span&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p class=&quot;p2&quot;&gt;
  &lt;span class=&quot;s1&quot;&gt;Given the strong connections between mathematics and computer science, it would be surprising if the sort of mathematical reasoning involved in understanding problems and planning their solution was not mirrored by similar thinking in specifying systems and designing solutions in the field of computing. Just as mathematics might be seen as thinking followed by symbol manipulation, so programming can be seen as &lt;b&gt;algorithms plus code&lt;/b&gt;. Before programmers begin work on coding solutions, they need to have fully understood the problem and have a clear plan (an algorithm) of how to solve it.&lt;/span&gt;
&lt;/p&gt;

&lt;p class=&quot;p2&quot;&gt;
  &lt;span class=&quot;s1&quot;&gt;The term ‘computational thinking’ has been coined to describe&lt;/span&gt;
&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p class=&quot;p4&quot;&gt;
  &lt;span class=&quot;s1&quot;&gt;&lt;i&gt;the thought processes involved in formulating problems and their solutions so that the solutions are represented in a form that can be effectively carried out by an information-processing agent. (&lt;/i&gt;&lt;span class=&quot;s5&quot;&gt;&lt;i&gt;&lt;a href=&quot;http://www.cs.cmu.edu/~CompThink/resources/TheLinkWing.pdf&quot;&gt;Wing, 2010&lt;/a&gt;)&lt;/i&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p class=&quot;p2&quot;&gt;
  &lt;span class=&quot;s1&quot;&gt;Whilst there is not yet a universal consensus over the &lt;a href=&quot;http://eprints.soton.ac.uk/356481/&quot;&gt;&lt;span class=&quot;s2&quot;&gt;exact ingredients&lt;/span&gt;&lt;/a&gt; of computational thinking, its importance in computing education is widely accepted. It is seen as a ‘golden thread’ running through the English &lt;a href=&quot;https://www.gov.uk/government/publications/national-curriculum-in-england-computing-programmes-of-study&quot;&gt;&lt;span class=&quot;s2&quot;&gt;National Curriculum for Computing&lt;/span&gt;&lt;/a&gt;, which begins:&lt;/span&gt;
&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p class=&quot;p4&quot;&gt;
  &lt;span class=&quot;s1&quot;&gt;&lt;i&gt;A high-quality computing education equips pupils to use computational thinking and creativity to understand and change the world. Computing has deep links with mathematics, science and design and technology, and provides insights into both natural and artificial systems.&lt;/i&gt;&lt;/span&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p class=&quot;p2&quot;&gt;
  &lt;span class=&quot;s1&quot;&gt;Building on &lt;a href=&quot;http://web.media.mit.edu/%7Ekbrennan/files/Brennan_Resnick_AERA2012_CT.pdf&quot;&gt;&lt;span class=&quot;s2&quot;&gt;Brennan and Resinick’s work&lt;/span&gt;&lt;/a&gt; in which computational thinking is explored as concepts, practices and perspectives, Computing At School’s &lt;a href=&quot;http://barefootcas.org.uk/&quot;&gt;&lt;span class=&quot;s2&quot;&gt;‘Barefoot Computing’&lt;/span&gt;&lt;/a&gt; continuing professional development programme for primary teachers identified six concepts and five approaches for computational thinking (qv Computing At School’s &lt;a href=&quot;http://primary.quickstartcomputing.org/resources/pdf/qs_handbook.pdf&quot;&gt;&lt;span class=&quot;s2&quot;&gt;QuickStart Computing handbook&lt;/span&gt;&lt;/a&gt;). The concepts provide a unified approach to problem solving in both mathematics and computing, with a number of the example activities produced for Barefoot Computing linking these to topics in the English mathematics curriculum.&lt;/span&gt;
&lt;/p&gt;

&lt;figure&gt;
&lt;img src=&quot;http://barefootcas.org.uk/wp-content/uploads/2014/06/Barefoot-CT-Poster-for-website.jpg&quot; /&gt;
&lt;figcaption&gt;The computational thinker&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;ul class=&quot;ul1&quot;&gt;
  &lt;li class=&quot;li4&quot;&gt;
    &lt;strong&gt;&lt;span class=&quot;s1&quot;&gt;Logical reasoning&lt;/span&gt;&lt;/strong&gt; &lt;ul class=&quot;ul2&quot;&gt;
      &lt;li class=&quot;li4&quot;&gt;
        &lt;span class=&quot;s1&quot;&gt;In computing pupils use laws of inference to predict what programs will do from their source code, to detect and correct errors in algorithms and programs and to analyse the efficiency and correctness of algorithms; pupils learn about Boolean logic and its applications to circuits, programs and search. Program execution by CPUs relies on logic gates.&lt;/span&gt;
      &lt;/li&gt;
      &lt;li class=&quot;li4&quot;&gt;
        &lt;span class=&quot;s1&quot;&gt;Mathematics is underpinned by set theory and logic. Mathematical reasoning is fundamentally logical reasoning. In maths, pupils will be expected to ‘show their working’ and to provide a justification for their answer. They form a basic understanding of sets and their relationship, which is later formalised through Venn diagrams and the notation of set theory. They are introduced to simple proof techniques in Euclidean geometry, and will use &lt;i&gt;reductio ad abusurdum&lt;/i&gt; and induction at A level.&lt;/span&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;

  &lt;li class=&quot;li4&quot;&gt;
    &lt;strong&gt;&lt;span class=&quot;s1&quot;&gt;Algorithms&lt;/span&gt;&lt;/strong&gt; &lt;ul class=&quot;ul2&quot;&gt;
      &lt;li class=&quot;li4&quot;&gt;
        &lt;span class=&quot;s1&quot;&gt;From an early age, pupils learn about algorithms as sets of rules or sequences of steps for real life situations such as making a jam sandwich or tidying their classroom. They learn how these algorithms are implemented as code on digital devices. They learn that there are multiple algorithms for the same problem. They create their own algorithmic solutions to computational problems and are taught some classic algorithms for search and sort, finding greatest common divisors and testing for primality. They study greedy and divide-and-conquer algorithms in a range of contexts, including graph theory. They compare the efficiency of algorithms, in time learning to use big-O notation.&lt;/span&gt;
      &lt;/li&gt;
      &lt;li class=&quot;li4&quot;&gt;
        &lt;span class=&quot;s1&quot;&gt;Pupils are typically taught standard algorithms for problems in arithmetic and subsequently algebra. This might be as simple as ‘count out the first number of sweets; count out the second number of sweets; now count how many sweets you have’ for integer addition, but will go on to include standard written algorithms for long multiplication and division, as well as methods for solving linear, simultaneous, quadratic and simple differential equations. Pupils are taught standard algorithms in other contexts, including testing for primality. They learn formulae for finding perimeters, areas and volumes, and for solving quadratic equations. Some pupils may discover their own algorithmic approaches to solving some classes of problems.&lt;/span&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;

  &lt;li class=&quot;li4&quot;&gt;
    &lt;strong&gt;&lt;span class=&quot;s1&quot;&gt;Decomposition&lt;/span&gt;&lt;/strong&gt; &lt;ul class=&quot;ul2&quot;&gt;
      &lt;li class=&quot;li4&quot;&gt;
        &lt;span class=&quot;s1&quot;&gt;Pupils learn to break down complex problems into smaller ones, tackling each of these in turn. Pupils learn how divide-and-conquer algorithms are applied recursively, efficiently reducing the number of steps needed to solve a problem (e.g. Quicksort). Pupils make use of decomposition in their programming, using procedures, functions or classes to allow the different components of complex software to be developed and tested independently. At the hardware level, pupils come to recognise how digital devices are made of multiple, complex components, each typically made from multiple, complex subsystems.&lt;/span&gt;
      &lt;/li&gt;
      &lt;li class=&quot;li4&quot;&gt;
        &lt;span class=&quot;s1&quot;&gt;Decomposition is also a powerful problem solving technique in mathematics, with pupils applying this in different contexts during their time at school. At an elementary level, pupils recognise how numbers are decomposed into parts using place value, and subsequently prime factors. Simple arithmetic algorithms rely on ready familiarity with decomposition using place value. Pupils learn how the area or volume of complex shapes can be found through decomposition. Subsequently, pupils learn how vectors can be decomposed into orthogonal components and how matrices (and thus systems of linear equations) can be decomposed in a number of ways.&lt;/span&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;

  &lt;li class=&quot;li4&quot;&gt;
    &lt;strong&gt;&lt;span class=&quot;s1&quot;&gt;Patterns and generalisation&lt;/span&gt;&lt;/strong&gt; &lt;ul class=&quot;ul2&quot;&gt;
      &lt;li class=&quot;li4&quot;&gt;
        &lt;span class=&quot;s1&quot;&gt;In computing, pupils come to recognise common ways to solve similar problems (for example, drawing equilateral triangles, squares and regular pentagons with a turtle), subsequently developing a general solution to a class of similar problems (in this case, drawing a regular polygon). Pupils learn to use libraries of functions developed by others rather than re-creating this code for themselves. They learn how other programmer’s solutions to problems may be modified to solve similar problems. As pupils’ software projects become more complex, they may make use of design patterns in their work, such as ‘model-view-controller’, which can be applied in a wide range of contexts from computer games to text editors.&lt;/span&gt;
      &lt;/li&gt;
      &lt;li class=&quot;li4&quot;&gt;
        &lt;span class=&quot;s1&quot;&gt;Young children come to recognise patterns at an early stage in mathematics education, colouring in shapes according to a rule or deciding what will come next in a sequence. They generalise their own rules of conservation of number, shape and mass from observation. Later they are introduced to patterns in number, including the times tables as well as common sequences such as square, triangular numbers and the Fibonacci sequence. They conduct mathematical investigations, first describing the rules they discover and then expressing these in algebra, as recurrence relations and then as formulae. Pupils learn generalised algorithms or techniques &amp;#8211; thus pupils learn the algorithm for long multiplication rather than memorising times tables to 100&amp;#215;100 or beyond and standard results for derivatives rather than computing each from first principles.&lt;/span&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;

  &lt;li class=&quot;li4&quot;&gt;
    &lt;strong&gt;&lt;span class=&quot;s1&quot;&gt;Abstraction&lt;/span&gt;&lt;/strong&gt; &lt;ul&gt;
      &lt;li class=&quot;li4&quot;&gt;
        &lt;span class=&quot;s1&quot;&gt;For Jeanette Wing &lt;/span&gt;&lt;span class=&quot;s3&quot;&gt;&lt;a href=&quot;https://www.cs.cmu.edu/~CompThink/papers/Wing08a.pdf&quot;&gt;abstraction lies at the heart of computational thinking&lt;/a&gt;,&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt; and its particular form in computer science serves to distinguish computational thinking from other approaches to problem solving. Computer systems, both hardware and software, are so complex that computer scientists and software engineers have found it essential to establish ways to &lt;i&gt;manage&lt;/i&gt; this complexity, by hiding or setting to one side multiple layers of detail. Pupils might first meet abstraction explicitly in the form of ‘computational abstractions which model the state and behaviour of real world systems’ &amp;#8211; for example the motion of a Snooker ball or the spread of an epidemic. They’ll also recognise abstraction in functions, classes, libraries and APIs they use in their code: where the details of implementation are left hidden, and at times inaccessible, behind well documented specifications. They’ll also recognise abstraction in their mental models of computation (or &lt;a href=&quot;http://dl.acm.org/citation.cfm?id=2483713&quot;&gt;&lt;span class=&quot;s5&quot;&gt;‘notional machines’&lt;/span&gt;&lt;/a&gt; where the layers of user interface, compiler / interpreter, operating system and the processor’s presentation layer sit between their actions and the copper and silicon of the hardware.&lt;/span&gt;
      &lt;/li&gt;
      &lt;li class=&quot;li4&quot;&gt;
        &lt;span class=&quot;s1&quot;&gt;Abstraction is important in mathematics education too, with the curriculum taking pupils from the concrete to the abstract along a path that would be familiar still to Piaget. At an early age, pupils form an abstract notion of, for example, three-ness from the concrete three bears, three sweets, three books etc. They form an abstract notion of triangle or cube from the experience of particular triangles and cubes. In problem solving, pupils identify the important information in the phrasing of a question, setting to one side the less relevant or irrelevant detail. Algebra might be seen as an abstraction of number, with algebra, geometry, probability and calculus the mathematician’s approach to modelling the state and behaviour of real world systems.&lt;/span&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;

  &lt;li class=&quot;li4&quot;&gt;
    &lt;strong&gt;&lt;span class=&quot;s1&quot;&gt;Evaluation&lt;/span&gt;&lt;/strong&gt; &lt;ul&gt;
      &lt;li class=&quot;li4&quot;&gt;
        &lt;span class=&quot;s1&quot;&gt;In computing, it’s necessary for pupils to check whether the functions, classes and programs they write produce the results they should. It’s also important that digital artefacts (including, but not limited to, programs) serve their intended purpose and are appropriate for their intended audience, and embody principles of good design. Pupils will also consider the efficiency, and indeed elegance of their code.&lt;/span&gt;
      &lt;/li&gt;
      &lt;li class=&quot;li4&quot;&gt;
        &lt;span class=&quot;s1&quot;&gt;In mathematics, pupils are taught to check their solutions, for example that numbers are broadly of the correct order of magnitude and make sense in the context of the original problem. They are also taught to check their working, that each step of their solution has been carried out correctly. Later on, they’ll learn to look for logical flaws in proofs and perhaps even grasp something of the aesthetics of ‘elegant’ proofs.&lt;/span&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p class=&quot;p2&quot;&gt;
  &lt;span class=&quot;s1&quot;&gt;It seems that we could gain much through the language, and perhaps even the approach, of computational thinking within the domain of school mathematics.&lt;/span&gt;
&lt;/p&gt;

&lt;p class=&quot;p2&quot;&gt;
  &lt;span class=&quot;s1&quot;&gt;The concepts of computational thinking can be learnt and applied in ‘unplugged’ approaches, within and beyond computing, without the use of digital technology (as the above comparison with mathematics education illustrates, see also, e.g. &lt;a href=&quot;http://csunplugged.org/&quot;&gt;&lt;span class=&quot;s2&quot;&gt;CS Unplugged&lt;/span&gt;&lt;/a&gt;). Wing’s ‘information processing agent’ certainly includes digital computers, but need not be limited to such devices.&lt;/span&gt;
&lt;/p&gt;

&lt;p class=&quot;p2&quot;&gt;
  &lt;span class=&quot;s1&quot;&gt;That said, many would argue that ‘computational thinking’ can be developed particularly (perhaps most) effectively when linked explicitly to the ‘computational doing’ of computer programming:&lt;/span&gt;
&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p class=&quot;p4&quot;&gt;
  &lt;span class=&quot;s1&quot;&gt;&lt;i&gt;Programming plays the same role in computer science that investigations do in maths or science. Programming animates the subject and brings computer science to life; it is creative, and engaging. It illustrates otherwise-abstract concepts in completely concrete terms. It is also an incredibly useful skill. (&lt;/i&gt;&lt;span class=&quot;s5&quot;&gt;&lt;i&gt;&lt;a href=&quot;http://primary.quickstartcomputing.org/resources/pdf/understanding_pos.pdf&quot;&gt;Peyton Jones 2014&lt;/a&gt;)&lt;/i&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p class=&quot;p2&quot;&gt;
  &lt;span class=&quot;s4&quot;&gt;&lt;a href=&quot;http://www.arvindguptatoys.com/arvindgupta/mindstorms.pdf&quot;&gt;Papert&lt;/a&gt;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt; wrote how that he&lt;/span&gt;
&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p class=&quot;p4&quot;&gt;
  &lt;span class=&quot;s1&quot;&gt;&lt;i&gt;began to see how children who had learned to program computers could use very concrete computer models to think about thinking and to learn about learning and in doing so, enhance their powers as psychologists and as epistemologists.&lt;/i&gt;&lt;/span&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p class=&quot;p2&quot;&gt;
  &lt;span class=&quot;s1&quot;&gt;The experience of most primary and secondary computing teachers seems to be that computational thinking is best taught when linked with directly with computer programming. It’s possible to argue, as Wolfram does that, if computer programs and computer programming were used more extensively in mathematics education, then this would allow teachers and pupils to focus much more attention on developing mathematical reasoning (or perhaps ‘computational thinking’) rather than mere calculation skills.&lt;/span&gt;
&lt;/p&gt;

&lt;p class=&quot;p2&quot;&gt;
  &lt;em&gt;Our sides are below:&lt;/em&gt;
&lt;/p&gt;
&lt;iframe src=&quot;https://docs.google.com/presentation/d/1DgsXcriFW4z1n3BcVl9pmu-Ncc-AoIrMy7G6MdPZX8A/embed?start=false&amp;amp;loop=false&amp;amp;delayms=3000&quot; frameborder=&quot;0&quot; width=&quot;480&quot; height=&quot;299&quot; allowfullscreen=&quot;true&quot; mozallowfullscreen=&quot;true&quot; webkitallowfullscreen=&quot;true&quot;&gt;&lt;/iframe&gt;

  &lt;p&gt;&lt;a href=&quot;/2016/11/computational-thinking-and-mathematical-reasoning/&quot;&gt;Computational thinking and mathematical reasoning&lt;/a&gt; was originally published by Miles Berry at &lt;a href=&quot;&quot;&gt;An open mind&lt;/a&gt; on November 27, 2016.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Coding across the primary curriculum]]></title>
  <link rel="alternate" type="text/html" href="/2016/07/coding-across-the-primary-curriculum/" />
  <id>/2016/07/coding-across-the-primary-curriculum</id>
  <published>2016-07-25T18:21:39+01:00</published>
  <updated>2016-07-25T18:21:39+01:00</updated>
  <author>
    <name>Miles Berry</name>
    <uri></uri>
    <email>m.berry@roehampton.ac.uk</email>
  </author>
  <content type="html">&lt;p&gt;Quite recently, we thought the future of ICT education would be one in which technology was embedded seamlessly throughout all aspects of teaching and learning, and that all a child could possibly need to learn about IT could be taught within the context of other subject areas. The seamless embedding of technology throughout the life of a school remains a dream for many, but schools at the cutting edge have already achieved much with 1:1 devices, robust wifi, great training and a vision for how technology can transform education.&lt;/p&gt;

&lt;p&gt;On the other hand, few would now argue that we can teach the new computing curriculum without setting aside some dedicated time to mastering the content of this new foundation subject. In the move from ICT to computing, our focus shifted away from the skills of using technology to knowledge and understanding of the principles of information and computation. It seems that mastering the foundational ideas of computer science, and particularly programming, requires some dedicated curriculum time. That’s not to say though that computing should be taught in isolation: the other subjects can provide motivating, relevant contexts for pupils to apply their computational thinking and programming skills.&lt;/p&gt;

&lt;h2 id=&quot;computational-thinking&quot;&gt;Computational thinking&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://milesberry.net/2014/03/computational-thinking-in-primary-schools/&quot;&gt;Computational thinking&lt;/a&gt; is the golden thread running through the computing curriculum: this is about looking at problems in such a way that a computer can help us solve them. It draws together such concepts as logical reasoning, decomposition, patterns, abstraction and algorithms, as well as approaches such as tinkering, making, debugging, persevering and collaborating.&lt;/p&gt;

&lt;p&gt;The foundations of computational thinking are laid in EYFS’s &lt;a href=&quot;http://www.foundationyears.org.uk/files/2012/03/Development-Matters-FINAL-PRINT-AMENDED.pdf&quot;&gt;characteristics of effective learning&lt;/a&gt;, but these concepts and approaches can be applied to any area of the primary curriculum further up the school: following or writing instructions makes use of algorithmic thinking; doing corrections in maths is debugging; looking for explanations in science is logical reasoning, and so on. As pupils become better at computational thinking through computing lessons, they’ll be better able to apply this across the curriculum.&lt;/p&gt;

&lt;p&gt;I think we can go further than this though. As pupils have been getting better at programming, I think we’re reaching the point where they can start to use this to do some creative things in other subjects. This isn’t merely about using other subjects as a context for learning to code, this is about coding as a way to help pupils learn in other subjects too. Here are some examples:&lt;/p&gt;

&lt;h2 id=&quot;maths&quot;&gt;Maths&lt;/h2&gt;

&lt;p&gt;The relationship between maths and programming goes back to Alan Turing and the the foundations of computer science. Simple turtle graphics are a great way to help pupils get a far more visceral feel for geometry, as they put themselves in the place of the turtle. Pupils quickly learn for themselves that exterior angles sum to 360˚. Writing programs where sprites move around the screen in Scratch similarly makes coordinates and negative numbers seem more real and more useful.&lt;/p&gt;

&lt;figure&gt;
&lt;img src=&quot;/wp-content/uploads/2016/07/download.png&quot; /&gt;
&lt;figcaption&gt;Snap! code for finding highest common factors using Euclid&amp;#8217;s algorithm
&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;In maths, we make use of algorithms (sequences of steps and sets of rules) all the time. We’ll teach pupils algorithms for checking if a number is prime, for finding common factors or for doing arithmetic with fractions. With a few coding skills, pupils could put their knowledge of these to the test by writing their own programs to implement these rules, trying them out with much bigger numbers than the exercises we set, and perhaps even finding faster algorithms for the same problem.&lt;/p&gt;

&lt;h2 id=&quot;music&quot;&gt;Music&lt;/h2&gt;

&lt;p&gt;Scratch has music making tools built in – it’s easy enough to record and play back audio, but it’s well worth getting pupils to experiment with creating music by sequencing notes and their durations. There’s a range of instrument and percussion available, and it’s possible to play multiple notes at the same time, so pupils can experiment with chords and polyphony. Repetition in programming can be linked to music compositions too, and pupils can explore randomly generated music, or music that reacts to input from mouse, keyboard or sensors. Pupils can improve their compositions in the same way as they debug their programs.&lt;/p&gt;

&lt;p&gt;Beyond Scratch, &lt;a href=&quot;http://sonic-pi.net/&quot;&gt;Sonic Pi&lt;/a&gt; and &lt;a href=&quot;https://earsketch.gatech.edu/landing/&quot;&gt;EarSketch&lt;/a&gt; take the text-based, grown-up programming languages Ruby and Python and make them directly applicable to musical composition. They’re certainly accessible to upper primary pupils, but go way beyond that level. There’s some amazing work going on at the moment at the intersection between music and computer science.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;use_bpm&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;90&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;use_synth&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:pretty_bell&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;define&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:sequence1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;play_pattern_timed&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;play_pattern_timed&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;play_pattern_timed&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;sequence1&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;play_pattern_timed&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;75&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;25&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sequence1&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;play_pattern_timed&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;75&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;25&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;play_pattern_timed&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;play_pattern_timed&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;25&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;25&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;play_pattern_timed&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;25&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;25&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;play_pattern_timed&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:g3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;25&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sequence1&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;play_pattern_timed&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;75&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;25&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;dt&quot;&gt;D&amp;amp;T&lt;/h2&gt;

&lt;p&gt;There’s an expectation in &lt;a href=&quot;https://www.gov.uk/government/publications/national-curriculum-in-england-design-and-technology-programmes-of-study/national-curriculum-in-england-design-and-technology-programmes-of-study#key-stage-2&quot;&gt;the Design and Technology curriculum&lt;/a&gt; that pupils at Key Stage 2 will&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“apply their understanding of computing to program, monitor and control their products.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Platforms such as the Lego WeDo, Crumble and the BBC micro:bit make it much easier than ever before for pupils to take their first steps into the realm of ‘physical computing’, using buttons, switches and sensors to accept input, writing their own code to process this and producing output through LEDs, speakers and motors. Whilst the BBC micro:bit’s initial distribution was to secondary schools, the online editor and emulator is accessible to all at &lt;a href=&quot;http://microbit.co.uk&quot;&gt;microbit.co.uk&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The most exciting work in physical computing, at school and beyond, is happening on the &lt;a href=&quot;https://www.raspberrypi.org/&quot;&gt;Raspberry Pi&lt;/a&gt;: which has a set of general purpose input and output pins built in, and support for using these from its own version of Scratch. There’s a ‘sense hat’ too, which incorporates a tiny display, joystick and some sensors: a couple of these, with programs written by British school children, went up to the international space station with Tim Peake for the &lt;a href=&quot;https://astro-pi.org/&quot;&gt;Astro Pi&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;art&quot;&gt;Art&lt;/h2&gt;

&lt;p&gt;Turtle graphics in Scratch, Logo or Python needn’t be restricted to maths – there’s ample scope to use this as a medium for pupils creative work in art too. QCA’s &lt;a href=&quot;http://webarchive.nationalarchives.gov.uk/content/20090608182316/http://standards.dfes.gov.uk/schemes2/it/itx4b/?view=get&quot;&gt;old scheme of work for ICT&lt;/a&gt; had a lovely unit on crystal flowers, there’s plenty of scope to explore tessellating patterns and Islamic art has a rich history of beautiful, geometric art to provide inspiration here. There’s also scope for exploring more natural patterns, experimenting with simple code to create recursive fractals for trees, fern leaves, broccoli or coastlines.&lt;/p&gt;

&lt;figure&gt;
&lt;img src=&quot;/wp-content/uploads/2016/07/Screen-Shot-2016-05-14-at-18.39.42-300x281.png&quot; /&gt;
&lt;figcaption&gt;Fractal broccoli in Scratch
&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2 id=&quot;foreign-languages&quot;&gt;Foreign languages&lt;/h2&gt;

&lt;p&gt;Scratch has excellent support for working in foreign languages – the familiar English of the programming blocks can be replaced with keywords from many other languages, even including Latin. This is great for pupils learning English as an additional language, but is also a nice way to build up pupils’ familiarity with a foreign language. Scratch is great for producing short, scripted animations, with on-screen and recorded dialogue or narration: why not have pupils program animations for a language they’re learning, or even a simple chatbot?&lt;/p&gt;

&lt;figure&gt;
&lt;img src=&quot;/wp-content/uploads/2016/07/Screen-Shot-2016-05-14-at-20.48.48-300x290.png&quot; /&gt;
&lt;figcaption&gt;Coding is the new Latin!
&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;You can also program Scratch (or Python) to generate semi-random, but grammatically correct sentences, using the computer science idea of a finite state machine. Playing with this gives some insights into the structure of a language: you could do this for English, but also for any other language that pupils are learning.&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;Looking for ways for pupils to use their IT skills across the curriculum, such as searching for information, making presentations and editing videos, remains as valuable as ever. Alongside this, I think we should now start looking for some of the cross-curricular ways that pupils can use their programming skills too.&lt;/p&gt;

&lt;p style=&quot;padding-left: 30px;&quot;&gt;
  &lt;em&gt;Originally published in &lt;a href=&quot;http://www.teachwire.net/&quot; target=&quot;_blank&quot;&gt;Teach Primary&lt;/a&gt;, June 2016. © all rights reserved. I explored these ideas further, with reference to the secondary curriculum, in my plenary at #casconf16:&lt;/em&gt;
&lt;/p&gt;

&lt;iframe width=&quot;640&quot; height=&quot;360&quot; src=&quot;https://www.youtube.com/embed/-JBgaR8sNcE&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

  &lt;p&gt;&lt;a href=&quot;/2016/07/coding-across-the-primary-curriculum/&quot;&gt;Coding across the primary curriculum&lt;/a&gt; was originally published by Miles Berry at &lt;a href=&quot;&quot;&gt;An open mind&lt;/a&gt; on July 25, 2016.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[This is CS50.]]></title>
  <link rel="alternate" type="text/html" href="/2016/05/this-is-cs50/" />
  <id>/2016/05/this-is-cs50</id>
  <published>2016-05-31T21:38:47+01:00</published>
  <updated>2016-05-31T21:38:47+01:00</updated>
  <author>
    <name>Miles Berry</name>
    <uri></uri>
    <email>m.berry@roehampton.ac.uk</email>
  </author>
  <content type="html">&lt;p&gt;&lt;a href=&quot;https://cs50.harvard.edu/&quot;&gt;CS50&lt;/a&gt; is an introductory computer science course offered at Harvard. Lots of US universities are offering ‘CS101’ introductory courses for programming and computer science, designed with a far broader audience than just those pursuing computer science as the subject, or major, for their degree. UK higher education generally lacks this flexibility, but it’s possible to think of A Level CS as a qualification with a similar sort of scope, and one which would be of value for any future academic or professional use of programming rather than merely as prep for a CS degree. CS50 is now &lt;a href=&quot;http://www.businessinsider.com/most-popular-course-at-harvard-2014-9?IR=T&quot;&gt;the most popular course&lt;/a&gt; at Harvard (and &lt;a href=&quot;http://yaledailynews.com/blog/2015/09/22/cs50-yales-most-popular-course/&quot;&gt;Yale&lt;/a&gt;), and similar courses have attracted similar levels of interest elsewhere.&lt;/p&gt;

&lt;p&gt;You don’t have to go to Harvard to study CS50 though. The course content is all available &lt;em&gt;for free&lt;/em&gt; through edX, as &lt;a href=&quot;https://cs50.harvard.edu/&quot;&gt;CS50x&lt;/a&gt;, an online, self-paced MOOC. There’s a pretty rich collection of content here: videos of the lectures given on campus, challenging, auto-graded problem sets (psets) linked to each lecture in the course, lots of support resources including an impressive online IDE (powered by &lt;a href=&quot;https://c9.io/&quot;&gt;cloud9&lt;/a&gt;), coding examples, short tutorial videos, and walkthroughs and post-mortem videos for the psets. The production standards of all this are really very high. You can take the MOOC with some ID verification (and a $90 fee) to get a certificate at the end if you want.&lt;/p&gt;

&lt;p&gt;There’s also &lt;a href=&quot;http://cs50.wiki/This+is+CS50+AP&quot;&gt;a version of the course&lt;/a&gt; that’s been tailored to US high school students sitting College Board’s new &lt;a href=&quot;https://advancesinap.collegeboard.org/stem/computer-science-principles&quot;&gt;Advance Placement CS Principles&lt;/a&gt; exam. This uses much of the same content and maintains the same rigour, but breaks the course down into smaller bits. The Harvard team seem to be going out of their way to make this something that high school teachers can access, adopt and adapt. There’s a couple of modes to delivering the course, I guess depending on time and expertise: one would be to take &lt;a href=&quot;http://cs.harvard.edu/malan/&quot;&gt;David Malan’s&lt;/a&gt; lecture slides and the associated notes and materials as a starting point for ones own teaching, the other would be to use the CS50 materials in ‘flipped’ mode, getting students to watch the videos at home and then use class time for discussion, coding examples and work on the psets.&lt;/p&gt;

&lt;p&gt;A few of us gathered together at Microsoft’s London office over the bank holiday weekend to learn a little more about this version. I think we were pretty impressed by what we saw. It’s worth saying that there are other courses which lead up to the CS Principles AP exam, including Berkeley’s &lt;a href=&quot;http://snap.berkeley.edu&quot;&gt;Snap!&lt;/a&gt; based &lt;a href=&quot;http://bjc.berkeley.edu/&quot;&gt;Beauty and Joy of Computing&lt;/a&gt; and &lt;a href=&quot;https://code.org/educate/csp#lessons&quot;&gt;a course&lt;/a&gt; from Code.org.&lt;/p&gt;

&lt;h2 id=&quot;whats-distinctive-about-cs50&quot;&gt;What’s distinctive about CS50?&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Accessibility&lt;/strong&gt;: On campus, 72% of those taking the course have never studied CS before. The ambition is to create a course experience which crosses all divides. The diversity of the CS50x community is some testament to that.&lt;/p&gt;

&lt;p&gt;The course starts from Scratch (literally), the on-ramp is deliberately gentle, although the traffic is fast-moving. There are some great &lt;a href=&quot;http://cs50.tv&quot;&gt;online support resources&lt;/a&gt; that sit between the lectures and the psets, which isn’t the case with some other MOOCs I’ve taken in the past. In College, there are large numbers of undergraduate ‘teaching fellows’ recruited from previous cohorts supporting, and grading, students’ work – I could see some schools’ ‘digital leaders’ taking on responsibilities similar to this.&lt;/p&gt;

&lt;p&gt;The lectures include quite a lot of unplugged and computational thinking content:&lt;/p&gt;

&lt;p&gt;Whilst Harvard and Yale students, and MOOC participants, are perhaps not typical of the population as a whole, making the course accessible to a broader demographic, and providing granular support seems to be a priority in the AP version of this.&lt;/p&gt;

&lt;p&gt;The underpinning philosophy is admirable:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;what ultimately matters in this course is not so much where you end up relative to your classmates but where you, in Week 11, end up relative to yourself in Week 0.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Rigour&lt;/strong&gt;: There’s no doubt that this is a hard course, particularly so after the first few psets. Prof Malan is unapologetic about this, believing that learners will rise to meet the challenges they’re presented with. I’m conscious that this might seem at odds with the preceding claims about accessibility, but changes to curriculum and assessment at home are, in part, about raising the expectations for all:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Teachers should set high expectations for every pupil. They should plan stretching work for pupils whose attainment is significantly above the expected standard. They have an even greater obligation to plan lessons for pupils who have low levels of prior attainment or come from disadvantaged backgrounds. Teachers should use appropriate assessment to set targets which are deliberately ambitious. (&lt;a href=&quot;https://www.gov.uk/government/publications/national-curriculum-in-england-framework-for-key-stages-1-to-4/the-national-curriculum-in-england-framework-for-key-stages-1-to-4#inclusion&quot;&gt;DfE, 2013&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;There are two elements of rigour here that deserve special mention.&lt;/p&gt;

&lt;p&gt;First, after the initial, Scratch-based, introduction, the main programming language is, er, C. I’ll admit that this struck me as odd for an introductory course, especially given the primacy of Python here for programming in secondary schools (see, e.g, &lt;a href=&quot;http://community.computingatschool.org.uk/files/6098/original.pdf&quot;&gt;Sentance, 2015&lt;/a&gt; and &lt;a href=&quot;http://ishallteach.org/index.php/2016/05/18/survey-results-what-programming-languages-are-being-taught-in-classroom-edtech-ict-computing-education/&quot;&gt;Martin, 2016&lt;/a&gt;). I’m pretty much convinced that Python is the right choice – low floor, wide walls, high ceilings, just as Papert would want for an introductory language, plus a great support community and lots of resources. However… C does get you somewhat closer to the machine itself, which I suspect makes for a better &lt;em&gt;notional machine&lt;/em&gt;, and the syntax carries over into lots of languages that owe their heritage to C. Malan provides &lt;a href=&quot;https://www.quora.com/Why-does-CS50-use-C-as-its-primary-language/answer/David-J-Malan&quot;&gt;some further justification&lt;/a&gt; for the choice on Quora. Other languages get used in the latter half of the course (PHP, JavaScript and SQL) where the focus shifts to developing web-based applications, and the final project can be attempted in any language you want.&lt;/p&gt;

&lt;p&gt;The other is the grading. Grading on the edX version of CS50 is simplicity itself – if your solution to each pset passes all the automatic unit tests, you get full credit for the pset. The CS50 team have developed a check50 tool so you can run the unit tests yourself before submitting your work. I like this approach. It does, however, do little to encourage good commenting, good layout or good design. In College a multi-axis approach to grading is used, and this approach is recommended for the AP version too.&lt;/p&gt;

&lt;p&gt;The axes are&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;Scope&lt;/em&gt;: To what extent does your code implement the features required by our specification?&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Correctness&lt;/em&gt;: To what extent is your code consistent with our specifications and free of bugs?&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Design&lt;/em&gt;: To what extent is your code written well (i.e., clearly, efficiently, elegantly, and/or logically)?&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Style&lt;/em&gt;: To what extent is your code readable (i.e., commented and indented with variables aptly named)?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There’s then a weighting applied, with the overall grade for a pset determined by &lt;em&gt;scope * (3 * correctness + 2 * design + 1 * style)&lt;/em&gt;. Scope, correctness (using check50) and style are pretty easy to determine (the latter made easier via a quasi-linter, style50 and the course &lt;a href=&quot;https://manual.cs50.net/style/&quot;&gt;style guide&lt;/a&gt;), but design is much more subjective and, I think, much harder for a non CS specialist to determine. As a starting point, Doug Lloyd (who’s coordinating the AP version of this) suggested getting students to ask themselves:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Can I eliminate:
    &lt;ul&gt;
      &lt;li&gt;Repetition?&lt;/li&gt;
      &lt;li&gt;Loops?&lt;/li&gt;
      &lt;li&gt;Magic numbers?&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Is there a shorter way to accomplish the same thing?&lt;/li&gt;
  &lt;li&gt;Should this code have been broken out into its own function&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The psets each have detailed grading rubrics for those teaching on the course, which helps.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Culture&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;There’s no doubt that CS50 has a real buzz to it at the College. This starts with a puzzle party at the beginning of term, free cake after the first lecture, a hackathon, a programming contest and a fair at the end of the course to showcase final projects. There are CS50 t-shirts, stress balls and a high profile presence across social media. There’s a well articulated, and consistent, message that the course is hard, but fun. This has, unsurprisingly, &lt;a href=&quot;http://www.thecrimson.com/article/2015/9/8/staff-cs50-widener-hours/&quot;&gt;upset some folk&lt;/a&gt;. For anyone looking to promote the profile of computing in their school, (qv [Brown, 2014 &lt;a href=&quot;https://dl.dropboxusercontent.com/u/8648376/OfstedBarefoot.ppt&quot;&gt;ppt&lt;/a&gt;]). I think there’s much to be learnt from this. I could see puzzles and problems taking off in schools, and I know a few folk who’ve already tried out school hackathons, although perhaps not on the 7pm to 7am schedule of the Harvard version.&lt;/p&gt;

&lt;p&gt;Another key element of culture in CS50 is the emphasis on academic honesty. There’s &lt;a href=&quot;http://cdn.cs50.net/ap/1516/problems/0/0/0-0.html#academic_honesty&quot;&gt;detailed guidance&lt;/a&gt; on each pset about what is and is not appropriate help, but much of this boils down to:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“when asking for help, you may show your code or writing to others, but you may not view theirs”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;One of the dangers with MOOCs is that solutions to problems do get posted online, and too many students might fall prey to the temptation to base their own solutions on these. &lt;em&gt;This absolutely never, ever happens with controlled assessments for GCSE computing&lt;/em&gt;. CS50 has such a strong presence on a range of social media that folk on the main channels seem to be pretty good at keeping to the spirit of the academic honesty policy. There may well be solutions out there, but you’re unlikely to encounter them by accident in the main support fora. CS50 does use plagiarism detection software (&lt;a href=&quot;https://theory.stanford.edu/~aiken/moss/&quot;&gt;moss&lt;/a&gt; and &lt;a href=&quot;http://www.etector.org/show.cgi&quot;&gt;ETector&lt;/a&gt;), and has no qualms about reporting students for academic discipline infringements, but, uniquely at Harvard, also has a regret clause – if students own up to breaking the academic honesty policy within 72 hours of the offence, the course manages this themselves rather than reporting it up to the ‘Ad Board’ for more drastic sanctions.&lt;/p&gt;

&lt;h2 id=&quot;how-would-this-work-in-england&quot;&gt;How would this work in England?&lt;/h2&gt;

&lt;p&gt;CS50 and its derivatives have been developed in a US context, and not everything translates across perfectly. Their higher education system has some significant differences from ours, as does their school system. There are, though, some ways that we could make use of the amazing work that’s gone into this.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ITT and CPD&lt;/strong&gt; We’re all acutely aware that one of the biggest challenges for making a success of the computing curriculum and associated qualifications is teachers’ own subject knowledge – almost uniquely, computing is a subject where we expect teachers to teach something they didn’t learn at school or university themselves. We’ve done much to address this subject knowledge gap, through initiatives like &lt;a href=&quot;http://barefootcas.org.uk/&quot;&gt;Barefoot&lt;/a&gt;, &lt;a href=&quot;http://www.quickstartcomputing.org/&quot;&gt;QuickStart&lt;/a&gt; and &lt;a href=&quot;http://www.computingatschool.org.uk/custom_pages/56-tenderfoot&quot;&gt;Tenderfoot&lt;/a&gt;, as well as the activities of CAS Master Teachers and others. There are also generous bursaries and scholarships to encourage computer scientists and software engineers to train to teach in secondary school.&lt;/p&gt;

&lt;p&gt;I do see a role for the CS50x as a high quality, rigorous and challenging element of computing CPD, both for those who’ve never programmed before and for those who’ve picked up some skills in Scratch and/or Python but are now looking to extend their programming knowledge into lower level programming as well as developing web-based apps. I think CS50x would also work well as subject knowledge enhancement for those wanting to train as computing teachers, at both primary and secondary levels, but lacking an A level in computer science or whose degrees didn’t include much, if any, programming.&lt;/p&gt;

&lt;p&gt;Alongside all the subject knowledge content, I think there’s much that teachers can learn from watching someone of Malan’s class teach: I know I certainly have, even if I have no hope of matching his energy and polish. In the style of those director’s commentary DVD extras, he’s recorded a &lt;a href=&quot;https://www.youtube.com/playlist?list=PLhQjrBD2T380hr3s-WpNej5w-i8l2hnOl&quot;&gt;pedagogic commentary&lt;/a&gt; on the 2014 version of the lectures.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Resources and psets&lt;/strong&gt; The video content (plus slides and notes) for CS50 and CS50 AP are &lt;em&gt;really&lt;/em&gt; high quality, and could be used very easily to support teaching at both GCSE and A Level. Rob Leeman from OCR joined us for some of the weekend and demonstrated how what’s there maps to OCR’s GCSE specification; he’s doing a similar mapping to the A Level spec. Looking at the &lt;a href=&quot;https://www.gov.uk/government/uploads/system/uploads/attachment_data/file/302105/A_level_computer_science_subject_content.pdf&quot;&gt;A Level subject content requirements&lt;/a&gt; from the DfE, I reckon the coverage should be good, although far from perfect, for other boards too.&lt;/p&gt;

&lt;p&gt;If you’re willing to adopt C as an initial teaching language (and it’s a big ‘if’), then the psets themselves could be of great value, perhaps particularly in their more granular AP format. Even if you’re using another language, the pset tasks and unit-testing approach could still prove useful. I do worry at times that our approach to computing education has moved too far in the direction of unplugged approaches, and computational thinking without computational &lt;em&gt;doing&lt;/em&gt;: CS50 provides, for me, a welcome emphasis on programming as the medium for learning much of the other subject matter.&lt;/p&gt;

&lt;p&gt;Another fab resource is &lt;a href=&quot;https://ide.cs50.io&quot;&gt;cloude9’s online IDE for CS50&lt;/a&gt;. To get access, all you need is an edX account, and I think these are available for pupils (over 13) as well as for teachers. This is a web interface to your own Ubuntu virtual machine, with a really simplified user interface: there’s an editor, a file browser and a console. Whilst optimised for C, the IDE has Python 2 and 3 installed out of the box, and installing new packages is simply a matter of &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo apt-get install foo&lt;/code&gt;. The IDE has built-in real-time collaborative editing too, as per Google Docs. There’s something similar available from &lt;a href=&quot;https://codio.com/&quot;&gt;Codio&lt;/a&gt;, which some CAS teachers will have encountered already as part of the &lt;a href=&quot;http://www.computingatschool.org.uk/certificate&quot;&gt;BCS/CAS certificate&lt;/a&gt; scheme.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Teaching the course&lt;/strong&gt; As things stand, I don’t think there’s anything to stop schools here registering as centres with College Board and entering pupils for AP CS Principles. At the moment, it doesn’t actually carry UCAS points, but &lt;a href=&quot;https://www.ucas.com/ucas/undergraduate/getting-started/entry-requirements/tariff/tariff-tables/966&quot;&gt;the other AP exams do&lt;/a&gt;, and I guess there’s some sort of routine recognition protocol that will mean new AP exams get UCAS points too. It would be odd if they didn’t. However, this isn’t an Ofqual regulated qualification and it certainly &lt;em&gt;doesn’t&lt;/em&gt; count for &lt;a href=&quot;https://www.gov.uk/government/uploads/system/uploads/attachment_data/file/482225/16_to_19_accountability_headline_measures_technical_guide.pdf&quot;&gt;performance tables&lt;/a&gt;. I suspect that without this recognition it would be a brave head teacher or principal that would devote limited resources to teaching a course designed for such an exam.&lt;/p&gt;

&lt;p&gt;That said, the final project element of CS50x or CS50 AP (which counts for 24% of the AP CS Principles grade) could be submitted as a practical project for the EPQ – this too carries &lt;a href=&quot;https://www.ucas.com/ucas/undergraduate/getting-started/entry-requirements/tariff/tariff-tables/1271&quot;&gt;UCAS&lt;/a&gt; points, seems &lt;a href=&quot;http://russellgroup.ac.uk/media/5320/informedchoices.pdf&quot;&gt;well regarded by the Russell Group&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;As well as your advanced level qualifications you might also consider the Extended Project Qualification (EPQ) which provides the opportunity to develop valuable independent study and research skills. Russell Group universities value the EPQ which can be drawn upon in your personal statement and at interview to provide evidence of enthusiasm for your chosen subject. Some Russell Group universities may also include the EPQ in their offers – check individual university guidance for more information.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;… and, crucially, counts for the academic performance measure in sixth form and college league tables (even if it doesn’t count towards the A-level section of the tables).&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;To get more of a flavour of the CS50 experience live, come along to the &lt;a href=&quot;http://old.computingatschool.org.uk/data/uploads/conf2016/conf2016Programme.pdf&quot;&gt;CAS Conference&lt;/a&gt; on 18 June 2016, where David Malan’s giving the closing keynote.&lt;/p&gt;

&lt;p&gt;I’d be interested to hear what others think about using these materials, teaching this course: is the context too far removed from our own? Is C too off-putting? Does the mismatch between the course and our qualification / accountability framework make this a non-starter for most English schools? Have you made use of MOOCs such as this for developing your own, or your colleagues’ subject knowledge? Was that a positive experience?&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;/2016/05/this-is-cs50/&quot;&gt;This is CS50.&lt;/a&gt; was originally published by Miles Berry at &lt;a href=&quot;&quot;&gt;An open mind&lt;/a&gt; on May 31, 2016.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Lessons from abroad]]></title>
  <link rel="alternate" type="text/html" href="/2016/04/lessons-from-abroad/" />
  <id>/2016/04/lessons-from-abroad</id>
  <published>2016-04-26T14:45:08+01:00</published>
  <updated>2016-04-26T14:45:08+01:00</updated>
  <author>
    <name>Miles Berry</name>
    <uri></uri>
    <email>m.berry@roehampton.ac.uk</email>
  </author>
  <content type="html">&lt;p&gt;There’s a global movement to teach children to code, and through this to give them the tools for solving problems and understanding systems that computational thinking offers. England is leading the way worldwide through including computer science as part of its national curriculum from primary onwards, and there seems ever increasing numbers of countries that are following in our footsteps, or at least taking a keen interest in what we’re doing here. There’s much that’s happening elsewhere that we can learn from – other countries are responding to this opportunity, and tackling this challenge in quite different ways, and I’d like to explore some of these here.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Extra-curricular opportunities&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Even where computing hasn’t made it onto national curricula, there’s much interest in supporting provision beyond the school curriculum. It’s easy to forget that Scratch itself started in the context of provision outside school, with &lt;a href=&quot;http://web.media.mit.edu/~mres/papers/clubhouse-chapter.pdf&quot;&gt;Resnick’s Computer Clubhouse&lt;/a&gt; work, which always had a focus on otherwise underserved communities, and I’d argue that most exciting and innovative Scratch projects are coming from individual Scratchers and Scratch Studios rather than school or classroom projects. &lt;a href=&quot;https://coderdojo.com/&quot;&gt;Coder Dojo&lt;/a&gt;, &lt;a href=&quot;https://www.codeclub.org.uk/&quot;&gt;Code Club&lt;/a&gt; and &lt;a href=&quot;http://www.appsforgood.org/&quot;&gt;Apps for Good&lt;/a&gt; operate internationally, and there’s global interest in products such as &lt;a href=&quot;https://www.raspberrypi.org/&quot;&gt;Raspberry Pi&lt;/a&gt; and the &lt;a href=&quot;https://www.microbit.co.uk/&quot;&gt;BBC Micro:Bit&lt;/a&gt;. I’m sure we were right to include computing in the statutory curriculum as this enshrines ideas of entitlement and inclusion, but I don’t think this should be at the expense of extra-curricular opportunities. No one gets to Carnegie Hall just through going to class recorder lessons: similarly, whilst our computing lessons open up CS to many who would otherwise not have studied this, those who are destined to be the software engineers and computer scientists of the future ought to be getting involved in the maker movement, taking some MOOCs, developing apps or games, going to hackdays and other things that are unlikely to feature in the provision made by schools.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Early Years&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Emma Goto and I wrote about &lt;a href=&quot;http://milesberry.net/2016/01/laying-the-foundations-for-computing-in-the-early-years/&quot;&gt;the importance of laying the foundations of computational thinking&lt;/a&gt; through the Early Years Foundation Stage in the previous edition of Switched On, but, for me, the most exciting work in this area is Linda Liukas’s inspiring &lt;a href=&quot;http://www.helloruby.com/&quot;&gt;Hello Ruby&lt;/a&gt; project in Finland. Hello Ruby, the book, was funded via Kick Starter: it’s a beautifully illustrated children’s story about Ruby, who loves learning and hates giving up, and her quest to collect gems in a fairy-tale world populated by snow leopards, penguins, fire foxes, androids and Django and his pet python. Linda doesn’t attempt to teach pre-schoolers to code through the story (thankfully), but she does get them thinking in an unmistakingly computational way.  There’s a companion website, at &lt;a href=&quot;http://www.helloruby.com/&quot;&gt;www.helloruby.com&lt;/a&gt;, with some brilliant, play-based ideas such as a cut out and keep computer (cheaper even than a Pi Zero!), and stick on power buttons to link everyday objects (at least in a child’s imagination) into the internet of things. Diane Levine is running a session at Roehampton’s &lt;a href=&quot;http://festivalofcomputing.com/&quot;&gt;Festival of Computing&lt;/a&gt; looking at how we might draw on these ideas at home. Linda has also been helping with the development of Finland’s new computing curriculum, which comes into effect in September – check out the support materials she’s produced at &lt;a href=&quot;http://koodi2016.fi/&quot;&gt;koodi2016.fi&lt;/a&gt; (probably using Google translate if you can’t manage the original Suomi)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Robotics&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Whilst there are plenty of schools in the UK that are working with robotics and other aspects of physical computing, I worry at times that we ought to have placed more emphasis on this in the curriculum. Elsewhere, there seems much more emphasis on this as a vital part of computing education: &lt;a href=&quot;http://progetiiger.ee/&quot;&gt;ProgeTiiger&lt;/a&gt; in Estonia fund 80% of the cost of robotics kits for elementary schools there, there’s similar generous funding for robotics projects in Portuguese schools, both primary and secondary and robotics plays an important part in extra-curricular computing in Singapore and South Korea – often going way beyond the sort of line-tracing / path-following projects we see at home. Back home, there’s been more interest in this of late, with the new &lt;a href=&quot;https://education.lego.com/en-gb/lesi/elementary/wedo-2&quot;&gt;WeDo 2.0 from Lego&lt;/a&gt;,  a number of Raspberry Pi powered robots and &lt;a href=&quot;http://ohbot.weebly.com/&quot;&gt;OhBot&lt;/a&gt;’s robotic face (which links nicely with Paul Curzon’s famous &lt;a href=&quot;https://teachinglondoncomputing.files.wordpress.com/2014/02/activity-create-a-face.pdf&quot;&gt;facial expression unplugged activity&lt;/a&gt;). &lt;a href=&quot;https://www.makewonder.com/dash&quot;&gt;Dot and Dash&lt;/a&gt; captured interest at BETT, with a default programming language that owes more to finite state machines than block based coding. Kitronik have developed &lt;a href=&quot;https://www.kitronik.co.uk/5604-line-following-buggy-for-the-bbc-microbit.html&quot;&gt;a BBC micro:bit powered robot kit&lt;/a&gt;, and the BBC are about to launch a new series of Robot Wars: it would be great to see some school teams enter this. That said, much of this seems a step up from moving cats around a screen, and some targeted CPD might be useful here.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Online training&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The challenge of training teachers to teach computer science, when they themselves never learnt any, isn’t unique to England. The locally distrusted, face to face, teacher-led model that CAS has championed has much to commend it, but there are times when it might look a bit ad-hoc compared to other approaches. I don’t doubt that a significant proportion of the &lt;a href=&quot;https://www.whitehouse.gov/blog/2016/01/30/computer-science-all&quot;&gt;$4 billion promised by President Obama to support CS for All&lt;/a&gt; in the states will be spent on training and professional development for teachers. In terms of teachers’ own subject knowledge, the most significant contribution is undeniably the MOOC (massive open online course) movement, with very high quality teaching materials made available for free online by prestigious universities, alongside facilitated online communities and assessment. Many of these can offer much for teachers wanting to learn more computer science than just that needed to teach the course – &lt;a href=&quot;https://www.edx.org/course/introduction-computer-science-mitx-6-00-1x-7&quot;&gt;MITx 6.00.1x&lt;/a&gt;, introduction to computer science and programming using Python, Berkeley’s &lt;a href=&quot;https://www.edx.org/course/beauty-joy-computing-cs-principles-part-uc-berkeleyx-bjc-1x&quot;&gt;Beauty and Joy of Computing&lt;/a&gt; and Harvard’s &lt;a href=&quot;https://www.edx.org/course/introduction-computer-science-harvardx-cs50x&quot;&gt;CS50x&lt;/a&gt; are all quite brilliant general introductions, pitched at first year undergraduate level. The latter two now exist as ‘advanced placement’ courses for US high school students, and could be a viable option for a sufficiently motivated student who finds herself in a school without a CS teacher. Microsoft are bringing a teacher version of CS50 to London in May – see &lt;a href=&quot;http://bit.ly/cs50ldn&quot;&gt;bit.ly/cs50ldn&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;None of the above should be taken as a criticism of how we’re going about things back home, but as some interesting, alternative perspectives on what is a worldwide movement. These are such exciting times, not just for us and our pupils, but for teachers and students across the globe.&lt;/p&gt;

&lt;p style=&quot;padding-left: 30px;&quot;&gt;
  &lt;em&gt;Originally published as Global computing: learning the lessons from initiatives abroad in &lt;a href=&quot;http://community.computingatschool.org.uk/files/7270/original.pdf&quot;&gt;Switched On&lt;/a&gt;, the Computing At School newsletter, Summer 2016&lt;/em&gt;
&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;/2016/04/lessons-from-abroad/&quot;&gt;Lessons from abroad&lt;/a&gt; was originally published by Miles Berry at &lt;a href=&quot;&quot;&gt;An open mind&lt;/a&gt; on April 26, 2016.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Revisiting agile pedagogy]]></title>
  <link rel="alternate" type="text/html" href="/2016/04/revisiting-agile-pedagogy/" />
  <id>/2016/04/revisiting-agile-pedagogy</id>
  <published>2016-04-16T20:32:09+01:00</published>
  <updated>2016-04-16T20:32:09+01:00</updated>
  <author>
    <name>Miles Berry</name>
    <uri></uri>
    <email>m.berry@roehampton.ac.uk</email>
  </author>
  <content type="html">&lt;p&gt;
  Back in 2012 I &lt;a href=&quot;http://www.theguardian.com/teacher-network/teacher-blog/2012/may/16/agile-pedagogy-computer-programming-learning&quot;&gt;wrote&lt;/a&gt; and presented a bit about &amp;#8216;agile pedagogy&amp;#8217; &amp;#8211; the notion of applying some of the ideas of agile development to the craft of teaching. There&amp;#8217;s been some renewed interest of late in this, as well as teaching students about agile development, so I&amp;#8217;m taking this opportunity to revisit the them.
&lt;/p&gt;

&lt;p&gt;
&lt;/p&gt;

&lt;p&gt;
  I’m not a software engineer, so I come to agile development from the outside.
&lt;/p&gt;

&lt;p&gt;
  I think there’s a couple of things going on. One is taking some of the ideas from agile development and applying them to our work as teachers, which is what I was trying to get at in the talk above. The other is teaching students agile development approaches. You can do both at the same time, but it’s probably worth thinking about them separately.
&lt;/p&gt;

&lt;p&gt;
  I think the former comes quite naturally to teachers.
&lt;/p&gt;

&lt;p&gt;
  We think of the ‘stories’ of our students &amp;#8211; Sam loves tinkering with things but struggles with theory; Alex is happy following instructions but finds it hard to get started when faced with a blank screen; Chris will get this immediately but won’t see the point of finishing off the documentation.
&lt;/p&gt;

&lt;p&gt;
  We have in mind a minimum viable product &amp;#8211; making sure the class know the things they need to / complete the tasks they have to, but I hope we’re not entirely satisfied with just getting them through the exams. Love of learning, reading round the subject, that sort of thing.
&lt;/p&gt;

&lt;p&gt;
  We think in terms of time boxed development &amp;#8211; here’s my backlog of things we need to teach in this unit, and misconceptions we have to correct.
&lt;/p&gt;

&lt;p&gt;
  The job comes into its own when we see our learners as partners in the educational process as &lt;a href=&quot;https://books.google.co.uk/books?id=x6rpxF-bpr4C&amp;amp;lpg=PP1&amp;amp;dq=visible%20learning&amp;amp;pg=PT53#v=snippet&amp;amp;q=%22when%20students%20become%20their%20own%20teachers%22&amp;amp;f=false&quot;&gt;Hattie&lt;/a&gt; observes:
&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;
  The biggest effects on student learning occur when … students become their own teachers.
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;
  For me, this is a crucial element of any ‘agile pedagogy’. A consequence of this has to be far more responsiveness to what happens in the room: taking their questions, interests and misconceptions as a starting point for what comes next.
&lt;/p&gt;

&lt;p&gt;
  I think there’s also a place for &lt;a href=&quot;https://en.wikipedia.org/wiki/Test-driven_development&quot;&gt;test driven development&lt;/a&gt; in our work. Check (test?) first whether pupils know something &amp;#8211; there’s little point teaching it if they do. Teach the thing. Check (test?) then whether they’ve learnt the thing. There’s evidence, should anyone ask for some) of progress and the impact of your teaching. Don’t stop at that point though &amp;#8211; ‘refactor’ the learning, making it better integrated with pupils’ schemata and more readily applicable to solving problems.
&lt;/p&gt;

&lt;p&gt;
  See also other folk writing about &lt;a href=&quot;http://www.opencolleges.edu.au/informed/features/agile-based-learning-what-is-it-and-how-can-it-change-education/&quot;&gt;agile schools&lt;/a&gt;, &lt;a href=&quot;http://www.edutopia.org/blog/the-agile-classroom-douglas-kiang&quot;&gt;agile classrooms&lt;/a&gt;, &lt;a href=&quot;http://www.cs.cityu.edu.hk/~hwchun/research/PDF/CHUN%20-%20ATLM%20v2%20b.pdf&quot;&gt;agile teaching / learning methodology&lt;/a&gt;, and &lt;a href=&quot;https://www.ted.com/talks/bruce_feiler_agile_programming_for_your_family?language=en&quot;&gt;agile parenting&lt;/a&gt; (seriously).
&lt;/p&gt;

&lt;p&gt;
  Teaching agile methods in computing lessons is another matter, but I think we’ve far more chance of being able to do this in primary school and in KS3 than we have under current exam specifications at GCSE / A Level, although even here I see agile and iterative development are now &lt;a href=&quot;http://www.ocr.org.uk/Images/231756-software-development-delivery-guide.pdf&quot;&gt;getting a look-in&lt;/a&gt;. I reckon that this could be taught through collaborative group project work fairly effectively: starting with groups thinking about what they’re going to make; reviewing lesson by lesson what they’ve done, problems they’ve encountered and things they still need to do; sharing tasks out between the group; working with a partner using &lt;a href=&quot;http://www.quickstartcomputing.org/secondary/Paired-programming.html&quot;&gt;pair programming&lt;/a&gt; if possible; testing units as they go; getting to a minimum viable product and then developing this further. I think projects like &lt;a href=&quot;http://www.appsforgood.org/&quot;&gt;Apps for Good&lt;/a&gt; provide some scope for this sort of approach, and I tried to include elements of this in some of the &lt;a href=&quot;http://www.risingstars-uk.com/Series/Switched-On-Computing&quot;&gt;Switched On Computing&lt;/a&gt; units.
&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;/2016/04/revisiting-agile-pedagogy/&quot;&gt;Revisiting agile pedagogy&lt;/a&gt; was originally published by Miles Berry at &lt;a href=&quot;&quot;&gt;An open mind&lt;/a&gt; on April 16, 2016.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Gender and Computing]]></title>
  <link rel="alternate" type="text/html" href="/2016/04/gender-and-computing/" />
  <id>/2016/04/gender-and-computing</id>
  <published>2016-04-16T09:52:31+01:00</published>
  <updated>2016-04-16T09:52:31+01:00</updated>
  <author>
    <name>Miles Berry</name>
    <uri></uri>
    <email>m.berry@roehampton.ac.uk</email>
  </author>
  <content type="html">&lt;p class=&quot;p1&quot;&gt;
  &lt;span class=&quot;s1&quot;&gt;Our latest &lt;a href=&quot;https://www.youtube.com/watch?v=zlYOJSlM0Ac&amp;amp;list=PLfZL5AW0loWk3vFyY7ge3EFHV553YU208&quot;&gt;&lt;span class=&quot;s2&quot;&gt;CAS TV programme&lt;/span&gt;&lt;/a&gt; explore some of the issues around gender and computing with Carrie Anne Philbin (&lt;a href=&quot;https://www.raspberrypi.org/&quot;&gt;&lt;span class=&quot;s2&quot;&gt;Raspberry Pi Foundation&lt;/span&gt;&lt;/a&gt;, &lt;a href=&quot;https://www.youtube.com/channel/UCxrp2coE9wRrnlOO3V3UmdQ&quot;&gt;&lt;span class=&quot;s2&quot;&gt;Geek Gurl Diaries&lt;/span&gt;&lt;/a&gt;, &lt;a href=&quot;http://casinclude.org.uk/&quot;&gt;&lt;span class=&quot;s2&quot;&gt;CAS #include&lt;/span&gt;&lt;/a&gt;). Do watch, and &lt;a href=&quot;https://www.youtube.com/channel/UCGsFzBpGCUiWwRZdnpnaS3A?sub_confirmation=1&quot;&gt;&lt;span class=&quot;s2&quot;&gt;subscribe&lt;/span&gt;&lt;/a&gt; if you haven’t already 🙂&lt;/span&gt;
&lt;/p&gt;
&lt;iframe width=&quot;640&quot; height=&quot;360&quot; src=&quot;https://www.youtube.com/embed/zlYOJSlM0Ac&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;p class=&quot;p1&quot;&gt;
&lt;/p&gt;

&lt;p class=&quot;p1&quot;&gt;
  &lt;span class=&quot;s1&quot;&gt;There is a problem here: at &lt;a href=&quot;http://www.jcq.org.uk/examination-results/gcses/2015/gcse-and-entry-level-certificate-results-summer-2015&quot;&gt;&lt;span class=&quot;s2&quot;&gt;GCSE&lt;/span&gt;&lt;/a&gt;, only 16% of the entries in computing were from girls; at &lt;a href=&quot;http://www.jcq.org.uk/examination-results/a-levels/2015/a-as-and-aea-results-summer-2015&quot;&gt;&lt;span class=&quot;s2&quot;&gt;A Level&lt;/span&gt;&lt;/a&gt;, this drops to just 8%. Only 456 girls took A level computing last year!&lt;/span&gt;
&lt;/p&gt;

&lt;p class=&quot;p1&quot;&gt;
  &lt;span class=&quot;s1&quot;&gt;So what can be done? Including computing on the curriculum for all is part of the solution I think. Back in 2011, &lt;a href=&quot;http://www.emmamulqueeny.com/&quot;&gt;&lt;span class=&quot;s2&quot;&gt;Emma Mulqueeny&lt;/span&gt;&lt;/a&gt; argued that ‘&lt;a href=&quot;https://mulqueeny.wordpress.com/2011/08/10/year-8-is-too-late/&quot;&gt;&lt;span class=&quot;s2&quot;&gt;Year 8 was too late&lt;/span&gt;&lt;/a&gt;’: if girls get interested in coding and computer science, they’re perhaps more likely to continue that interest into secondary school and beyond. It’ll be some time before we find out whether or not this turns out to be the case, but I for one am optimistic.&lt;/span&gt;
&lt;/p&gt;

&lt;p class=&quot;p1&quot;&gt;
  &lt;span class=&quot;s1&quot;&gt;In the video, Carrie Anne argues for more positive role models for women in computing, and there are many heroes that we could cite, from &lt;a href=&quot;https://en.wikipedia.org/wiki/Ada_Lovelace&quot;&gt;&lt;span class=&quot;s2&quot;&gt;Ada Lovelace&lt;/span&gt;&lt;/a&gt; and &lt;a href=&quot;https://en.wikipedia.org/wiki/Grace_Hopper&quot;&gt;&lt;span class=&quot;s2&quot;&gt;Grace Hopper&lt;/span&gt;&lt;/a&gt; through to &lt;a href=&quot;https://blackse.wordpress.com/&quot;&gt;&lt;span class=&quot;s2&quot;&gt;Sue Black&lt;/span&gt;&lt;/a&gt; and &lt;a href=&quot;http://www.ecs.soton.ac.uk/~wh&quot;&gt;&lt;span class=&quot;s2&quot;&gt;Wendy Hall&lt;/span&gt;&lt;/a&gt;. These though, perhaps, seem a bit distant from secondary school pupils. I love Carrie Anne’s idea of teachers drawing on their own students as role models, with female sixthformers helping out with KS3 classes for example.&lt;/span&gt;
&lt;/p&gt;

&lt;p class=&quot;p1&quot;&gt;
  &lt;span class=&quot;s1&quot;&gt;Carrie Anne’s point about girls enjoying more authentic, practical, collaborative, projects, ideally with some altruistic purpose is well made, and well worth thinking about. There’s some great work going on in Key Stage 3, such as through projects such as &lt;a href=&quot;http://www.appsforgood.org/&quot;&gt;&lt;span class=&quot;s2&quot;&gt;Apps For Good&lt;/span&gt;&lt;/a&gt;, and at A Level or university, project work can take into account just these sorts of opportunities (although awarding organisations tend to frown on the collaboration…). I’m less sure how appealing GCSE controlled tasks are to girls, or indeed many boys.&lt;/span&gt;
&lt;/p&gt;

&lt;p class=&quot;p1&quot;&gt;
  &lt;span class=&quot;s1&quot;&gt;The key message though is more about teaching computing &lt;i&gt;better&lt;/i&gt;, in a more inclusive way, rather than one which is designed to, or perhaps just by accident, appeals to one gender more than another. I’d say it’s well worth departments thinking hard, and discussing honestly, what they might do about this in their school.&lt;/span&gt;
&lt;/p&gt;

&lt;p class=&quot;p1&quot;&gt;
  &lt;span class=&quot;s1&quot;&gt;Is this a problem in your school? How have you got on with making computing more inclusive for girls? Or indeed, better for boys and girls?&lt;/span&gt;
&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;/2016/04/gender-and-computing/&quot;&gt;Gender and Computing&lt;/a&gt; was originally published by Miles Berry at &lt;a href=&quot;&quot;&gt;An open mind&lt;/a&gt; on April 16, 2016.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Computers and brains]]></title>
  <link rel="alternate" type="text/html" href="/2016/04/computers-and-brains/" />
  <id>/2016/04/computers-and-brains</id>
  <published>2016-04-08T15:18:02+01:00</published>
  <updated>2016-04-08T15:18:02+01:00</updated>
  <author>
    <name>Miles Berry</name>
    <uri></uri>
    <email>m.berry@roehampton.ac.uk</email>
  </author>
  <content type="html">&lt;p&gt;An interesting interview with Prof Steve Furber for this week’s &lt;a href=&quot;https://www.youtube.com/watch?v=wnSjR04qang&amp;amp;list=PLfZL5AW0loWk3vFyY7ge3EFHV553YU208&quot;&gt;#CASTV programme&lt;/a&gt;:&lt;/p&gt;

&lt;iframe width=&quot;640&quot; height=&quot;360&quot; src=&quot;https://www.youtube.com/embed/wnSjR04qang&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;The focus of the discussion is on the &lt;a href=&quot;http://apt.cs.manchester.ac.uk/projects/SpiNNaker/&quot;&gt;SpiNNaker project&lt;/a&gt;, a massively parallel, ARM powered machine capable of simulating at least some of how a brain functions. Programming a machine like this involves thinking about problems differently, but events and messages are something we can introduce pupils to via Scratch, not that I’m suggesting we start emulating brains in Scratch…&lt;/p&gt;

&lt;p&gt;Simulating a brain isn’t necessarily the same as simulating consciousness (qv &lt;a href=&quot;http://www.amazon.co.uk/The-Emperors-New-Mind-Concerning/dp/0192861980&quot;&gt;Penrose, 1999&lt;/a&gt;), and this could lead on to some interesting philosophical / ethical discussions in class. Is anyone exploring these ideas with their pupils? How?&lt;/p&gt;

&lt;p&gt;Steve’s been a hugely influential figure in UK computing – as the hardware designer for the BBC Micro (qv&lt;a href=&quot;https://www.youtube.com/watch?v=XXBxV6-zamM&quot;&gt;Micro Men&lt;/a&gt;), and subsequently with ARM. He also chaired the Royal Society’s &lt;a href=&quot;https://royalsociety.org/~/media/education/computing-in-schools/2012-01-12-computing-in-schools.pdf&quot;&gt;Shutdown or Restart&lt;/a&gt; report, which was a key influence on the move from ICT to computing. His &lt;a href=&quot;https://www.youtube.com/watch?v=q5SxGrowoYI&quot;&gt;Lovelace lecture&lt;/a&gt; for the BCS is well worth a watch.&lt;/p&gt;

&lt;p&gt;Are we doing enough to prepare pupils for a not too distant future in which machines like SpiNNaker might be able to simulate the connections and behaviour of human brains?&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;/2016/04/computers-and-brains/&quot;&gt;Computers and brains&lt;/a&gt; was originally published by Miles Berry at &lt;a href=&quot;&quot;&gt;An open mind&lt;/a&gt; on April 08, 2016.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Snap!]]></title>
  <link rel="alternate" type="text/html" href="/2016/03/snap/" />
  <id>/2016/03/snap</id>
  <published>2016-03-30T10:08:32+01:00</published>
  <updated>2016-03-30T10:08:32+01:00</updated>
  <author>
    <name>Miles Berry</name>
    <uri></uri>
    <email>m.berry@roehampton.ac.uk</email>
  </author>
  <content type="html">&lt;p style=&quot;color: #000000;&quot;&gt;
  Our latest CAS TV programme features &lt;a href=&quot;https://www.youtube.com/watch?v=7tjNnF4fAgI&quot;&gt;John Stout, discussing programming in Snap!&lt;/a&gt; (a close relation to Scratch), including some ways of using it to introduce pupils to functional programming.
&lt;/p&gt;

&lt;iframe width=&quot;640&quot; height=&quot;360&quot; src=&quot;https://www.youtube.com/embed/7tjNnF4fAgI&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;p style=&quot;color: #000000;&quot;&gt;
  I wonder who’s using &lt;a href=&quot;http://snap.berkeley.edu/&quot;&gt;Snap!&lt;/a&gt; in their schools? Does it make sense to use this as a block-based language in KS3 to provide a little higher ceilings that Scratch offers, especially as many will have ‘done’ Scratch whilst at primary? What sort of thing have you done with Snap! if so?
&lt;/p&gt;

&lt;p style=&quot;color: #000000;&quot;&gt;
  Scratch clearly has a more vibrant online community, and much more extensive resources: how important are these factors when choosing a language?
&lt;/p&gt;

&lt;p style=&quot;color: #000000;&quot;&gt;
  Personally, I’m a great fan. Some of my projects:
&lt;/p&gt;

&lt;ul style=&quot;color: #000000;&quot;&gt;
  &lt;li&gt;
    &lt;a href=&quot;http://snap.berkeley.edu/snapsource/snap.html#present:Username=mgberry&amp;amp;ProjectName=fractions&quot;&gt;Rational arithmetic&lt;/a&gt;
  &lt;/li&gt;
  &lt;li&gt;
    Morse code &amp;#8211; &lt;a href=&quot;http://snap.berkeley.edu/snapsource/snap.html#present:Username=mgberry&amp;amp;ProjectName=morse&quot;&gt;code&lt;/a&gt; and &lt;a href=&quot;https://www.youtube.com/watch?v=6FiQS7fYauU&quot;&gt;walkthrough video&lt;/a&gt;.
  &lt;/li&gt;
  &lt;li&gt;
    &lt;a href=&quot;http://snap.berkeley.edu/snapsource/snap.html#present:Username=mgberry&amp;amp;ProjectName=simple%20crypto&quot;&gt;Substitution cipher&lt;/a&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;a href=&quot;http://snap.berkeley.edu/snapsource/snap.html#present:Username=mgberry&amp;amp;ProjectName=quicksort&quot;&gt;Quicksort&lt;/a&gt;
  &lt;/li&gt;
&lt;/ul&gt;

  &lt;p&gt;&lt;a href=&quot;/2016/03/snap/&quot;&gt;Snap!&lt;/a&gt; was originally published by Miles Berry at &lt;a href=&quot;&quot;&gt;An open mind&lt;/a&gt; on March 30, 2016.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[The only way is ethics]]></title>
  <link rel="alternate" type="text/html" href="/2016/02/the-only-way-is-ethics/" />
  <id>/2016/02/the-only-way-is-ethics</id>
  <published>2016-02-03T15:10:48+00:00</published>
  <updated>2016-02-03T15:10:48+00:00</updated>
  <author>
    <name>Miles Berry</name>
    <uri></uri>
    <email>m.berry@roehampton.ac.uk</email>
  </author>
  <content type="html">&lt;p&gt;We need to pay more attention to ethics when we teach computing. You’d be forgiven for thinking computing in the national curriculum is all about coding. It’s not. There should be a balance between computer science, information technology and digital literacy, or the theoretical foundations, practical applications and societal implications of computing.&lt;/p&gt;

&lt;p&gt;A quick scan of the news demonstrates that an ethical approach to computing really does matter: see, for example, &lt;a href=&quot;http://www.spectator.co.uk/2015/10/we-let-programmers-run-our-lives-so-hows-their-moral-code/&quot;&gt;Audi&lt;/a&gt;, &lt;a href=&quot;http://www.bbc.co.uk/news/uk-34784980&quot;&gt;Talk Talk&lt;/a&gt; and the &lt;a href=&quot;https://www.openrightsgroup.org/blog/2015/investigatory-powers-bill&quot;&gt;Investigatory Powers Bill&lt;/a&gt;. Attention to ethics in computing education would lead to a better informed debate about these and similar issues, and our trust in digital technology and those who program it.&lt;/p&gt;

&lt;p&gt;The digital literacy strand of the &lt;a href=&quot;https://www.gov.uk/government/publications/national-curriculum-in-england-computing-programmes-of-study/national-curriculum-in-england-computing-programmes-of-study&quot;&gt;curriculum&lt;/a&gt; expects teachers to promote an ethical approach to computing: seven year olds should know how to use technology safely, but also respectfully; they’re also introduced to the idea of online privacy. By the age of eleven, pupils should learn to use technology &lt;em&gt;responsibly&lt;/em&gt; as well as recognising the difference between right and wrong (or acceptable and unacceptable behaviour, as the DfE phrases this). The curriculum’s &lt;a href=&quot;http://academy.bcs.org/sites/academy.bcs.org/files/ICT%20POS%20Final%20Draft%2030%20Nov%202012_0.pdf&quot;&gt;drafting panel&lt;/a&gt; went further still, including in the aims that pupils could “critically articulate the individual, cultural, and societal impacts of digital technology”, although this didn’t survive the DfE’s subsequent editing. Schools are &lt;a href=&quot;http://www.legislation.gov.uk/ukpga/2002/32/section/78&quot;&gt;required&lt;/a&gt; to promote pupils’ spiritual, social, moral and cultural development, and a greater focus on ethics in computing could do much to support this.&lt;/p&gt;

&lt;p&gt;Primary computing provides ample opportunities for teachers to help pupils understand some of the issues here.&lt;/p&gt;

&lt;p&gt;Take, for example, intellectual property (IP). From an early age, children feel that it’s unfair if others copy their work, but how careful are they about asking permission and giving credit when it’s online content that they’re copying? I suspect as teachers we are often guilty of not respecting IP rights with online content ourselves, happily adding others’ images to our presentations, searching the web for policy documents or letters to parents, or downloading videos to show to a class, without acknowledging the source or observing the terms and conditions. More positively, let’s teach children how to share their work with an audience and to re-use or re-mix only content that’s been published with this in mind. Let’s teach pupils how &lt;a href=&quot;https://creativecommons.org/&quot;&gt;Creative Commons&lt;/a&gt; licences allow them and others to build on creative work – &lt;a href=&quot;http://scratch.mit.edu&quot;&gt;the Scratch community site&lt;/a&gt; is a great example of this.&lt;/p&gt;

&lt;p&gt;Honesty, integrity and truthfulness are curiously missing from the list of &lt;a href=&quot;https://www.gov.uk/government/uploads/system/uploads/attachment_data/file/380595/SMSC_Guidance_Maintained_Schools.pdf&quot;&gt;fundamental British values&lt;/a&gt; schools are now obliged to promote, but these surely should form part of any ethical approach to computing education. We should stress to children that they should be truthful when they write online. When pupils work in digital media, they should show the world as it is: they should learn how photos, audio and video can be edited to show things more positively (or negatively) than they are, but should also recognise the harm that should misrepresentation can do, and become more adept at spotting this when it happens. If pupils sign up for online services, they shouldn’t lie about their age or identity, and should stick to the conditions they (or their parents or teachers) agree to.&lt;/p&gt;

&lt;p&gt;Often pupils are involved in framing the rules of the school’s acceptable use policy, but too many of these focus on risk aversion and safety, when there’s something to be gained from involving pupils in a richer conversation about values, morality and how we should decide what the right thing to do is. Despite the diversity of Wikipedia’s editors, there’s agreement over &lt;a href=&quot;https://en.wikipedia.org/wiki/Wikipedia:Five_pillars&quot;&gt;the principles which underpin the project&lt;/a&gt;: things like seeking consensus, assuming good faith, welcoming newcomers and calm discussion to resolve conflicts. Are these principles your school shares?&lt;/p&gt;

&lt;p&gt;The next decade or two are likely to see ethical issues in computing become more important: as predictive analytics becomes more pervasive and powerful, how should we view &lt;a href=&quot;https://www.ted.com/talks/kevin_slavin_how_algorithms_shape_our_world?language=en&quot;&gt;algorithms&lt;/a&gt; making life-changing decisions about health care, employment, education and finance? Who gets sued when a &lt;a href=&quot;http://spectrum.ieee.org/cars-that-think/transportation/self-driving/why-you-shouldnt-worry-about-liability-for-selfdriving-car-accidents&quot;&gt;self-driving car&lt;/a&gt; crashes? Who do we credit with algorithmically generated &lt;a href=&quot;https://devart.withgoogle.com/&quot;&gt;art&lt;/a&gt; or &lt;a href=&quot;http://artsites.ucsc.edu/faculty/cope/experiments.htm&quot;&gt;music&lt;/a&gt;? If a machine and a person can perform a task equally well, who should get &lt;a href=&quot;http://www.bbc.co.uk/news/technology-34066941&quot;&gt;the job&lt;/a&gt;?  When a machine passes the &lt;a href=&quot;http://www.csee.umbc.edu/courses/471/papers/turing.pdf&quot;&gt;Turing test&lt;/a&gt;, what rights should it have? Important as having coding and other elements of computer science on the curriculum are, ethical questions like these are more important still: if primary school is a good place to start learning to code, perhaps it’s also the place to start discussing these issues.&lt;/p&gt;

&lt;p style=&quot;padding-left: 30px;&quot;&gt;
  &lt;em&gt;Originally published as Digital Devilry in the January 2015 edition of &lt;a href=&quot;http://www.teachprimary.com/&quot;&gt;Teach Primary&lt;/a&gt;. © 2015, all rights reserved.&lt;/em&gt;
&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;/2016/02/the-only-way-is-ethics/&quot;&gt;The only way is ethics&lt;/a&gt; was originally published by Miles Berry at &lt;a href=&quot;&quot;&gt;An open mind&lt;/a&gt; on February 03, 2016.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Laying the foundations for computing in the early years]]></title>
  <link rel="alternate" type="text/html" href="/2016/01/laying-the-foundations-for-computing-in-the-early-years/" />
  <id>/2016/01/laying-the-foundations-for-computing-in-the-early-years</id>
  <published>2016-01-18T19:36:33+00:00</published>
  <updated>2016-01-18T19:36:33+00:00</updated>
  <author>
    <name>Miles Berry</name>
    <uri></uri>
    <email>m.berry@roehampton.ac.uk</email>
  </author>
  <content type="html">&lt;p&gt;Computing co-ordinators often wonder what to encourage in the nursery or reception class. The easy answer is, ‘not computing!’ However, there is a lot of learning in the Early Years Foundation Stage (EYFS) that provides a foundation for computational thinking.&lt;/p&gt;

&lt;p&gt;Computing may not be part of the &lt;a href=&quot;https://www.gov.uk/government/uploads/system/uploads/attachment_data/file/335504/EYFS_framework_from_1_September_2014__with_clarification_note.pdf&quot;&gt;EYFS Statutory Framework&lt;/a&gt;, but there is much that goes on in the EYFS that provides a foundation for computational thinking – the golden thread that runs through &lt;a href=&quot;https://www.gov.uk/government/publications/national-curriculum-in-england-computing-programmes-of-study/national-curriculum-in-england-computing-programmes-of-study&quot;&gt;Computing in the National Curriculum&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In the Statutory Framework for EYFS, the early learning goal from the ‘technology’ strand in the ‘understanding the world’ area of learning, requires that, ‘children recognise that a range of technology is used in places such as homes and schools’. This is about helping children to understand their place in a world that seems increasingly dominated by technology. We need to help them make sense of this world, as well as planting the seeds for their understanding of the implications of technology in their lives and society. This is the start of ‘digital literacy’ and it extends into Key Stage 1, where children are taught to ‘recognise common uses of information technology beyond school’. Early Years practitioners provide a rich environment in which children can build up an understanding of the world through play. They help children to be curious about technology in real world contexts: what happens inside a microwave? or a photocopier? what happens when Mummy puts her card in the machine outside the bank? what is the machine called? why does she have to type a number in? why does she keep it secret? Through roleplay and natural discussions like these the children make sense of their world.&lt;/p&gt;

&lt;p&gt;Although the EYFS ‘technology’ requirement doesn’t explicitly state digital technology, it would be hard to address this properly without giving children an experience of the digital as well as the analogue here. That said, many of us would worry about an environment, whether at home or school, in which young children are spending too much time ‘plugged in’ to screens, narrowing communication and the range of practical experiences from which children learn.&lt;/p&gt;

&lt;p&gt;An analogue only education seems of diminishing relevance to the modern world; a digital only education seems a hugely impoverished early childhood experience. Irrespective of access to Bee-Bots, iPads or other digital technology, young children should also be learning outside, making mud pies, climbing trees, playing with puppets, sharing books, making models and chatting with their friends.&lt;/p&gt;

&lt;p&gt;The technology early learning goal states that children should ‘select and use technology for particular purposes’. There are a wide range of digital technologies that young children can use playfully and collaboratively, such as digital cameras, audio recorders, tablet computers, phones (smart or otherwise) and simple, programmable robots such as Bee-Bot. As they play with these devices, children will form their own mental model (schema) of how these work, sometimes through chatting to one another, or asking a grown-up, but more often just through play. Note the reference here to ‘select’ – it’s not enough for children to use the tech they’re given: they’ve got to have some say in what they use. Are these things stored somewhere children can access them? How are these things kept charged? Do children know the basics of how to keep themselves and the equipment safe? How will they be shared fairly?&lt;/p&gt;

&lt;p&gt;The use of technology can support children across other areas of learning, providing children with new ways to communicate and share their ideas. In the ‘being imaginative’ strand of the ‘expressive arts and design’ area of learning, the early learning goal states the expectation that children ‘use what they have learnt about media and materials in original ways, thinking about uses and purposes. They represent their own ideas, thoughts and feelings through design and technology, art, music, dance, role-play and stories’. The requirement doesn’t specify digital media or information technology, but nor does it preclude it. Alongside working with crayons, pencils, paints and craft materials, there’s ample opportunity for children to use photography, record music they make, video one another and paint with fingers, trackpad or mouse on screen&lt;/p&gt;

&lt;p&gt;Further up the primary school, we recognise that there is much more to computing than learning to use digital technology. Computational thinking, understood, after &lt;a href=&quot;http://rsta.royalsocietypublishing.org/content/366/1881/3717&quot;&gt;Jeanette Wing&lt;/a&gt;, as “taking an approach to solving problems, designing systems and understanding human behaviour that draws on concepts fundamental to computing”, is the golden thread running through the computing curriculum. But computational thinking doesn’t begin in Key Stage 1: the foundations are laid in EYFS.&lt;/p&gt;

&lt;figure&gt;
&lt;img src=&quot;/wp-content/uploads/2016/01/Barefoot-CT-Poster-for-website-1024x723.jpg&quot; /&gt;
&lt;figcaption&gt;The Barefoot computational thinker
&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;&lt;a href=&quot;http://barefootcas.org.uk/&quot;&gt;Barefoot Computing&lt;/a&gt;, developed by CAS, offers a model of computational thinking as being made up of both concepts and approaches. It’s widely used in primary schools. All these concepts and approaches can be applied, at least to some extent with four and five year olds. Indeed, some begin earlier still. The nursery or reception classroom is full of opportunities to solve problems. Carrying the water up the hill; solving (or making) jigsaws; building models; spotting and extending a pattern. When children are faced with these problems, the questions that Early Years practitioners would naturally be posing can encourage computational thinking. Here’s some examples:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Logical reasoning&lt;/strong&gt; What will happen if I do this? How do you know?&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Algorithms&lt;/strong&gt; What do I need to do to solve this? Is there a better way?&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Decomposition&lt;/strong&gt; Can we break this problem up? Could we each do different jobs to solve the problem?&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Patterns&lt;/strong&gt; Have you solved something like this before? What did you do then? What’s changed?&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Abstraction&lt;/strong&gt; What’s the most important thing here? Maybe we can draw a picture of this?&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Evaluation&lt;/strong&gt; What went well? Which way worked best? What would you do differently next time?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The Statutory Framework expects practitioners to consider how children learn and develop in relation to three ‘characteristics of effective learning’:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;playing and exploring&lt;/strong&gt; – investigate, experience things, and ‘have a go’;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;active learning&lt;/strong&gt; – concentrate, keep on trying if encountering difficulties, and enjoy achievements; and&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;creating and thinking critically&lt;/strong&gt; – have their own ideas, make links between them, and develop strategies for doing things.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are very close connections here with the ‘approaches’ to computational thinking that Barefoot Computing uses. Playing and exploring links closely with tinkering and collaborating, as well as abstraction. Active learning is tied to debugging and persevering. Creating and thinking critically connects with Barefoot’s creating, as well as back to the concepts of logical reasoning and algorithms.&lt;/p&gt;

&lt;p&gt;So how do we encourage the development of these approaches? This is often about getting the learning environment right. By providing open ended activities that encourage children to use all their senses to observe, discover and engage with the world, we encourage them to tinker, play and explore. Opportunities to take things apart, to build and make models help children to be creative. Getting children to do a jigsaw, recreate a pattern or draw a picture can all encourage them to debug. We provide activities that require longer periods of engagement, concentration and perseverance. Sharing books and toys, playing with puppets or taking part in a nativity play or harvest festival all help develop collaboration.&lt;/p&gt;

&lt;figure&gt;
&lt;img src=&quot;/wp-content/uploads/2016/01/Screen-Shot-2016-01-18-at-20.17.20.png&quot; /&gt;
&lt;figcaption&gt;Some of the characteristics of effective learning
&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;The non-statutory guidance in &lt;a href=&quot;http://www.foundationyears.org.uk/files/2012/03/Development-Matters-FINAL-PRINT-AMENDED.pdf&quot;&gt;Development Matters&lt;/a&gt; gives plenty of examples of how these characteristics of effective learning develop, and these link directly with the notion of computational thinking. So, for example, the early stages of logical reasoning will draw on ‘making predictions’ – getting a child to say what will happen if they do or change something, as well as ‘developing ideas of cause and effect’ – can they link their actions to the effects they produce, on screen or off? Abstraction starts early too: representative play captures the essence of a thing, putting to one side much of the detail: children ‘pretend objects are things from experience’ and ‘represent experiences as play’. Debugging, whilst not called that, is common in Early Years with children ‘learning by trial and error’ and ‘persisting with activities when challenges occur’.&lt;/p&gt;

&lt;p&gt;As with all learning, we need to recognise the importance of children’s early experiences. If we can get the environment right in these early days, we can set children off on the right foot to develop computational thinking and creativity.&lt;/p&gt;

&lt;p style=&quot;padding-left: 30px;&quot;&gt;
  &lt;em&gt;Written by &lt;a href=&quot;http://www.winchester.ac.uk/academicdepartments/teacherdevelopment/Peopleprofilesteacherdevelopment/Academicprofiles/Pages/mrs-emma-goto.aspx&quot;&gt;Emma Goto&lt;/a&gt; and me for the &lt;a href=&quot;http://community.computingatschool.org.uk/files/6917/original.pdf&quot;&gt;Spring 2016 edition of Switched On&lt;/a&gt;, the &lt;a href=&quot;http://www.computingatschool.org.uk/&quot;&gt;CAS&lt;/a&gt; Newsletter. &lt;/em&gt;
&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;/2016/01/laying-the-foundations-for-computing-in-the-early-years/&quot;&gt;Laying the foundations for computing in the early years&lt;/a&gt; was originally published by Miles Berry at &lt;a href=&quot;&quot;&gt;An open mind&lt;/a&gt; on January 18, 2016.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Making the links between computing and mathematics]]></title>
  <link rel="alternate" type="text/html" href="/2016/01/making-the-links-between-computing-and-mathematics/" />
  <id>/2016/01/making-the-links-between-computing-and-mathematics</id>
  <published>2016-01-07T11:10:01+00:00</published>
  <updated>2016-01-07T11:10:01+00:00</updated>
  <author>
    <name>Miles Berry</name>
    <uri></uri>
    <email>m.berry@roehampton.ac.uk</email>
  </author>
  <content type="html">&lt;p&gt;There are some great ways to link computing and all the other subjects on the school curriculum, but there’s a particularly strong argument for making connections with mathematics.&lt;/p&gt;

&lt;p&gt;As a discipline, computing owes its origins to mathematics. Babbage’s &lt;a href=&quot;http://www.computerhistory.org/babbage/engines/&quot;&gt;analytical engine&lt;/a&gt; was designed to compute mathematical tables. The word ‘computer’ was originally applied to a person who performed calculations. Turing’s paper ‘&lt;a href=&quot;https://www.cs.virginia.edu/~robins/Turing_Paper_1936.pdf&quot;&gt;On computable numbers with an application to the Entscheidungsproblem&lt;/a&gt;’ was more about proving a mathematical theorem than founding a new science. Cambridge’s computer lab started out as ‘&lt;a href=&quot;http://www.cl.cam.ac.uk/relics/history.html&quot;&gt;the mathematical laboratory&lt;/a&gt;‘.&lt;/p&gt;

&lt;p&gt;Let’s look at the connections from both perspectives: firstly, bringing maths into computing.&lt;/p&gt;

&lt;p&gt;Given our current focus on thinking rather than coding, there are strong parallels between mathematical reasoning and computational thinking: logical reasoning, algorithms, abstraction, generalisation, decomposition and evaluation play a central role in both CS and mathematical problem solving. Conrad Wolfram’s four steps for doing maths parallel stages of traditional software development:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;define&lt;/li&gt;
  &lt;li&gt;translate&lt;/li&gt;
  &lt;li&gt;compute&lt;/li&gt;
  &lt;li&gt;interpret&lt;/li&gt;
&lt;/ol&gt;

&lt;figure&gt;
&lt;img src=&quot;/wp-content/uploads/2016/01/Screen-Shot-2016-01-07-at-11.53.38.png&quot; /&gt;
&lt;figcaption&gt;CBM Solution Helix of Math
&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;There’s a fair amount of mathematical content in computer science as taught in schools. In primary, Bee Bots and similar are used early on to practise positional language and emerging measure and children are now more likely to meet angles and coordinates in Scratch before these get covered in maths lessons. Topics such as &lt;a href=&quot;http://www.cimt.plymouth.ac.uk/projects/mepres/book9/bk9i1/bk9_1i1.html&quot;&gt;binary conversion&lt;/a&gt;, binary arithmetic, Boolean logic and functions all make demands on pupils’ mathematical understanding. There’s some potentially gritty maths in computing at GCSE and A level: graph theory, modular arithmetic, formal logic and measures of algorithmic efficiency.  It’s perhaps no surprise that grade B in GCSE maths is seen as a prerequisite for A Level computer science, or that A level maths / further maths, is often &lt;a href=&quot;http://www.russellgroup.ac.uk/media/5320/informedchoices.pdf&quot;&gt;a requirement&lt;/a&gt; for studying CS at Russell Group universities.&lt;/p&gt;

&lt;p&gt;Going in the other direction, there are very many opportunities to enrich school mathematics through computing, but more than that, computer science provides a means through which mathematical ideas become “incarnate, tangible and executable”.&lt;/p&gt;

&lt;p&gt;Wolfram makes &lt;a href=&quot;http://www.ted.com/talks/conrad_wolfram_teaching_kids_real_math_with_computers?language=en&quot;&gt;a strong case&lt;/a&gt; for ‘computer based mathematics’ being taught in schools – arguing that this reflects how real maths is done, making the subject far more relevant than when calculations are done by hand. It’s the third of Conrad’s steps (‘compute’) that the machines are unsurprisingly much better at: perhaps a pupil’s mathematical understanding would be enhanced by spending more of her time on steps 1, 2 and 4 and proportionately less on the easily automatable step 3. ‘Show your working’ could be at least as much about providing the source code for your program as making marks on paper.&lt;/p&gt;

&lt;p&gt;In much of maths education working with software can be powerful: turtle graphics as a tool to think geometrically; &lt;a href=&quot;http://research.microsoft.com/en-us/um/people/simonpj/Papers/excel/excel.pdf&quot;&gt;spreadsheets as a visual introduction to functional programming&lt;/a&gt;; the classes, objects and methods of &lt;a href=&quot;http://www.geogebra.org/&quot;&gt;dynamic geometry software&lt;/a&gt;; data visualisation without the faff through Excel, &lt;a href=&quot;http://raw.densitydesign.org/&quot;&gt;Raw&lt;/a&gt; or &lt;a href=&quot;https://www.r-project.org/&quot;&gt;R&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;There’s a place for introducing pupils to the tools (some) professionals use, such as &lt;a href=&quot;http://www.wolfram.com/mathematica/&quot;&gt;Mathematica&lt;/a&gt; or its slimmed down, online sibling, &lt;a href=&quot;http://www.wolframalpha.com/&quot;&gt;Wolfram Alpha&lt;/a&gt;. Mathematica is programmed using the Wolfram Language, which is &lt;em&gt;very&lt;/em&gt; high level, with built-in functions for finite state machines, graph traversals, Turing machines and machine learning classifiers, amongst other things… Note Mathematica is bundled as part of NOOBS for the &lt;a href=&quot;https://www.raspberrypi.org/learning/getting-started-with-mathematica/&quot;&gt;Raspberry Pi&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Programming has many applications in maths education: &lt;a href=&quot;http://snap.berkeley.edu/snapsource/snap.html#present:Username=mgberry&amp;amp;ProjectName=fractions&quot;&gt;writing functions for fractions arithmetic&lt;/a&gt;, solving equations numerically, &lt;a href=&quot;https://scratch.mit.edu/projects/27750964/#editor&quot;&gt;simulating probability experiments&lt;/a&gt; etc. The list is pretty inexhaustible, and provides rich territory to develop understanding in mathematics and computer science side by side.&lt;/p&gt;

&lt;p&gt;The links between computer science and mathematics provide both challenge and opportunity for curriculum development in schools. We draw on mathematics in computing; we use computation (automated or otherwise) in mathematics. At the recent &lt;a href=&quot;https://www.computerbasedmath.org/events/maths-education-summit-2015/&quot;&gt;Computer Based Mathematics summit&lt;/a&gt;, CAS chair Simon Peyton Jones and Andrew Fitzgibbon made a strong case for teaching the two subjects &lt;em&gt;together&lt;/em&gt; – with the current curricula and exam specs for the two subjects. What they suggest isn’t maths with a nod to CS or CS with a nod to maths, but rather CS bringing to life the abstractions of maths, and maths providing the foundational abstractions that underpin CS. Implementing such a vision at national scale isn’t trivial, but perhaps a few teachers in some forward thinking schools or academies might be up for trying this out? It would be phenomenally interesting experiment!&lt;/p&gt;

&lt;p style=&quot;padding-left: 30px;&quot;&gt;
  &lt;em&gt;Originally published in the &lt;a href=&quot;https://t.co/F9b3FGePJQ&quot;&gt;Spring 2016 edition of Switched On&lt;/a&gt;, the Computing at School newsletter, as an introduction to a section on computing and mathematics.&lt;/em&gt;
&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;/2016/01/making-the-links-between-computing-and-mathematics/&quot;&gt;Making the links between computing and mathematics&lt;/a&gt; was originally published by Miles Berry at &lt;a href=&quot;&quot;&gt;An open mind&lt;/a&gt; on January 07, 2016.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Some thoughts on pupils ‘bringing their own device’ (BYOD)]]></title>
  <link rel="alternate" type="text/html" href="/2015/12/some-thoughts-on-pupils-bringing-their-own-device-byod/" />
  <id>/2015/12/some-thoughts-on-pupils-bringing-their-own-device-byod</id>
  <published>2015-12-17T19:01:42+00:00</published>
  <updated>2015-12-17T19:01:42+00:00</updated>
  <author>
    <name>Miles Berry</name>
    <uri></uri>
    <email>m.berry@roehampton.ac.uk</email>
  </author>
  <content type="html">&lt;p&gt;This is prompted in part by the &lt;a href=&quot;https://www.tes.com/news/school-news/breaking-news/ofsted-warns-against-extremely-disruptive-tablets-school&quot;&gt;TES&lt;/a&gt; citing &lt;a href=&quot;http://www.slideshare.net/Ofstednews/childinternetsafetysummitonlinesafetyinspection&quot;&gt;some data&lt;/a&gt; from HMI David Brown which appeared to show that 30% of secondary pupils questioned by inspectors in Section 5 inspections last March said they were able to use their own device (eg laptop or tablet) at their school. I was pleasantly surprised his figures were as high as this. To spoil my fun, the TES included a somewhat reactionary quote from an Ofsted spokesperson:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“Pupils bringing personal devices such as laptops or tablets into school can be extremely disruptive and make it difficult for teachers to teach…. It is up to schools to decide whether they have rules about personal devices, but Ofsted would be supportive of heads who took tough action to make the learning environment better for children.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Putting to one side the potential extreme disruption of Ofsted inspections, it appeared the issue was not so much the tablet, as the ownership of the tablet. Sean Hartford, Ofsted’s national director for education, &lt;a href=&quot;https://twitter.com/HarfordSean/status/675636011523788801&quot;&gt;tweeted&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“I think we need to get one thing straight: nobody at Ofsted thinks using tablets is disruptive”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Which was somewhat reassuring, as was &lt;a href=&quot;https://cogitateit.wordpress.com/2015/12/11/disruptive-technology/&quot;&gt;Mike Cameron’s analysis of inspection reports&lt;/a&gt; that mentioned tablets (other technologies are available, although I worry that you’d not always notice this).&lt;/p&gt;

&lt;p&gt;Subsequently, &lt;a href=&quot;https://cogitateit.wordpress.com/2015/12/16/disruptive-technology-part-2/&quot;&gt;it emerged&lt;/a&gt; that Ofsted’s spokesperson had, er, misunderstood the TES’s enquiry, and affirmed that actually technology, even pupils &lt;em&gt;own&lt;/em&gt; technology wasn’t intrinsically bad if it was used for learning:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Ofsted is clear that technology can of course have a positive impact on a pupil’s learning experience (as noted in many of our reports) and we are not against the use of tablets, laptops or other devices in school when part of planned lessons.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The debate though about the appropriateness of students using their own technology in school goes on. One of the reasons why, in England at least,  there’s so much disagreement over young people’s use of smartphones, tablets and laptops in school, whether they’re their own or the institution’s, is that autonomous access to technology such as this  goes to the heart of what education and schooling should be for.&lt;/p&gt;

&lt;p&gt;On the one, traditionalist if you will, hand there’s a notion of schooling as about cultural transmission, of teachers authoritatively imparting knowledge and of pupils being well prepared for qualifications that open the doors to further study or semi-lucrative employment. These aren’t bad things. 1:1 access to smartphones, tablets or laptops &lt;em&gt;can&lt;/em&gt; help with this, but they’re hardly necessary, and potentially disruptive as behaviour ‘czar’ Tom Bennett &lt;a href=&quot;http://www.thesundaytimes.co.uk/sto/news/uk_news/article1599972.ece&quot;&gt;has argued&lt;/a&gt; (paywall). Indeed, OECD’s &lt;a href=&quot;http://www.oecd.org/education/students-computers-and-learning-9789264239555-en.htm&quot;&gt;Students, Computers and Learning&lt;/a&gt; report suggests that access to tech has little impact on exam performance.&lt;/p&gt;

&lt;p&gt;A more progressive approach would recognise that, important as these things are, there’s more to education than that. That acquiring knowledge to pass exams and get a job isn’t the same as coming to love learning for its own sake. That being taught well isn’t the same as being able to learn for yourself (as many in higher education notice, year in year out, with incoming freshers). That, as Papert argued in The Children’s Machine (1993):&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“The most important skill determining a person’s life pattern has already become the ability to learn new skills, to take in new concepts, to assess new situations, to deal with the unexpected. “&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Indeed, such ‘progressive’ approaches have quite a long tradition. For example, Plowden, reporting in 1967:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“One of the main educational tasks of the primary school is to build on and strengthen children’s intrinsic interest in learning and lead them to learn for themselves.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;My own schooling was coloured by Plowden’s recommendations – I’ve vivid memories of an afternoon a week in Year 5 and Year 6 spent pursuing our own independent projects – I did tea (clearly, British values were important even back then), philately, probability and local history. Important as these branches of learning were in pre-National Curriculum days, the long lasting effect was the knowledge that I could teach myself &lt;em&gt;something&lt;/em&gt;, and that it was enjoyable to do so. I caught a love of learning (and of libraries) that has stayed with me to the present day. You can imagine the consequent excitement when I first connected to the Web back in 1995. We provided a similar experience to the Year 4, 5 and 6 pupils when I was head at Alton, through entering them for &lt;a href=&quot;http://esbuk.org/&quot;&gt;English Speaking Board&lt;/a&gt; exams – they spent English, history and geography lessons for a few weeks researching &lt;em&gt;their own choice&lt;/em&gt; of topic to teach to their peers.&lt;/p&gt;

&lt;p&gt;Interestingly, Ofsted inspection criteria appear to value this broader view of education. One criterion for ‘outstanding’ from &lt;a href=&quot;https://www.gov.uk/government/uploads/system/uploads/attachment_data/file/458866/School_inspection_handbook_section_5_from_September_2015.pdf&quot;&gt;the current inspection handbook&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“Pupils love the challenge of learning and are resilient to failure. They are curious, interested learners who seek out and use new information to develop, consolidate and deepen their knowledge, understanding and skills. They thrive in lessons and also regularly take up opportunities to learn through extra-curricular activities.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If &lt;em&gt;this&lt;/em&gt;  is the purpose of education, then 1:1 provision, at the point of need, of the up to date digital technology may be, well, helpful:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;There, at their fingertips, would be access to the world’s greatest library – to every Wikipedia article, to Google Maps, YouTube, Flickr, TED, &lt;a href=&quot;http://www.wolframalpha.com/&quot;&gt;Wolfram Alpha&lt;/a&gt;, MOOCs from the world’s leading universities, to &lt;a href=&quot;https://www.gutenberg.org/&quot;&gt;Project Gutenberg&lt;/a&gt; and the classic novels Nick Gibb wants to see in all schools, to the world’s greatest art, literature and music. To the &lt;em&gt;content&lt;/em&gt; that would have been beyond the reach of all but the most privileged elite less than a couple of generations ago.&lt;/li&gt;
  &lt;li&gt;Putting to one side for now the safety issues, there’s the opportunity to participate in, or at least listen to, a global conversation. Recognising that there are others from whom one can learn, and discussion beyond the classroom in which one can participate is hugely empowering. It’s also something where what constitutes safe, responsible and constructive behaviour needs, I think, to be taught.&lt;/li&gt;
  &lt;li&gt;Digital technology also puts the means of production and distribution into the hands of young people – this could be a blog post written for &lt;a href=&quot;https://100wc.net/&quot;&gt;100 Word Challenge&lt;/a&gt;, a Scratch game, original photography, audio or video, or &lt;a href=&quot;http://www.3dami.org.uk/&quot;&gt;sophisticated 3D animations&lt;/a&gt;. We see with blogging, Scratch and young people’s own video work how effective the right media tools and a sense of global audience can be in encouraging young people to strive for their best and to reach beyond that which they’ve been taught.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So, what do we want from education? Pupils passing exams, or students coming to love learning for its own sake? If it’s just the former, transmissive teaching, practice papers and textbooks may well prove highly effective. If it’s also the latter, then providing 1:1 access to the web may be helpful too. For what follows, I’m assuming you see value in the latter. Not everyone does.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;If&lt;/em&gt; we take the red pill and think a) promoting a love of learning is at least as important as passing exams and b) think that 1:1 access to digital technology can help here, what  should we do?&lt;/p&gt;

&lt;p&gt;One option is to invest in the kit. Lots of schools have done this, and those that have put a vision for transforming learning and teaching at the heart of this provision have seen some great benefits here. This isn’t cheap. Take care with your choice of kit too: iPads may not be the solution you’re looking for; Chromebooks are cheaper and pretty fab.&lt;/p&gt;

&lt;p&gt;Another is to get parents to provide particular devices for pupils to use in schools, and again that can be successful, although there are thorny issues here of device ownership and control, as well as social equity.&lt;/p&gt;

&lt;p&gt;A third option is to let pupils bring in their own devices and use those in school. There’s a number of obvious benefits here. It’s much more economical for schools than providing students with kit. It’s much more economical for students and parents to be able to use the device they already own rather than having to buy a completely different one for school. It’s better for the environment too – how many screens does a teenager &lt;em&gt;need&lt;/em&gt;? It’s much more empowering for students – they know how to use their device; they have admin privileges on it so can get more done; they learn better how to make use of &lt;em&gt;their machine&lt;/em&gt; for purposeful work. It’s great preparation for higher education, where BYOD is the model outside of particularly specialised contexts. It sends a powerful message that the effective use of technology is not about the hardware, or even the software, but about how you use it. There’s little need for training. There’s no point buying really naff apps. It makes the web the platform, removing the silos of (particularly iOS) apps. It explicitly recognises young people’s &lt;a href=&quot;https://en.wikisource.org/wiki/United_Nations_Convention_on_the_Rights_of_the_Child#Article_13&quot;&gt;right to freedom of expression&lt;/a&gt; (‘seek, receive and impart information and ideas of all kinds’).&lt;/p&gt;

&lt;p&gt;BYOD is not, however, without its issues. Common arguments against this approach include:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Teachers are no longer in control of what pupils do with their device. Is our role as teachers to &lt;em&gt;control&lt;/em&gt; children? Or to educate them? Yes, we have a duty of care, but this may be best exercised through teaching pupils to behave responsibly not through some sort of authoritarian control of what they do.&lt;/li&gt;
  &lt;li&gt;Teachers can’t learn to teach all these different applications and operating systems. Nor should they. I dread to imagine lessons in which pupils are trained to use iPhones. These are devices which ship without manuals because the interface is so well designed you don’t need one. Not sure how to get something done? Play; Google it; ask a friend; post a question to &lt;a href=&quot;http://stackoverflow.com/&quot;&gt;Stack Overflow&lt;/a&gt; (if you’re very brave). In that order.&lt;/li&gt;
  &lt;li&gt;Not every pupil can afford a device of their own. A perhaps &lt;a href=&quot;http://stakeholders.ofcom.org.uk/market-data-research/other/research-publications/childrens/children-parents-nov-15/&quot;&gt;surprisingly high proportion&lt;/a&gt; of young people &lt;em&gt;do&lt;/em&gt; have smartphones, tablets or laptops of their own, but not all can afford one. I think in some cases this &lt;em&gt;may&lt;/em&gt; be a good use of pupil premium money. It seems a fair few schools are spending pupil premium funds like this already, judging by &lt;a href=&quot;https://cogitateit.wordpress.com/2015/12/11/disruptive-technology/&quot;&gt;Mike’s sample of Ofsted reports&lt;/a&gt; and &lt;a href=&quot;https://www.nao.org.uk/wp-content/uploads/2015/06/Funding-for-disadvantaged-pupils.pdf&quot;&gt;the NAO’s survey of head teachers&lt;/a&gt; (50% of the sample reported spending pupil premium on digital technology – which include, but isn’t limited to 1:1 device provision). Back in ‘09, &lt;a href=&quot;https://www.gov.uk/government/uploads/system/uploads/attachment_data/file/181525/DFE-RR132.pdf&quot;&gt;the Becta home access scheme&lt;/a&gt; seemed successful at narrowing the gap for young people and their families; I wonder how many schools have thought of funding home internet access out of pupil premium? If not, why not?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If your school is considering a change of approach by venturing down the route of allowing pupils to make use of their own technology in school, then there are a few things, some of them not immediately obvious, which it’s worth getting right first.&lt;/p&gt;

&lt;p&gt;First and foremost, this is about &lt;strong&gt;culture and values&lt;/strong&gt;: it’s about making the school a learning community, a place in which education is a shared endeavour for which all take responsibility, not something which one groups does to another group. Getting this right isn’t trivial, but it &lt;em&gt;is&lt;/em&gt; worth it. As Hattie puts it,&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“The biggest effects on student learning occur when …  students become their own teachers.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Certainly from the position of higher education, our best students aren’t those who take the best notes in lectures and submit those back to us in their essays, but are those who read, think and write for themselves. I ask my students what they would want from their pupils: children who accepted what the teacher said or children who would question things; naïve as they are, most would prefer the latter.&lt;/p&gt;

&lt;p&gt;Behaviour. I’m at risk of sounding like someone from the NRA, but &lt;strong&gt;it’s not phones, tablets and laptops that disrupt lessons, it’s pupils.&lt;/strong&gt; Establishing a purposeful learning environment in which disruptive, anti-social behaviour just doesn’t happen is essential if BYOD is going to help rather than hinder learning. If you can’t get that right, then Tom, Nick and Sir Michael are probably right, and it would be better to ban the things. However, don’t assume that simply banning digital tech is going to miraculously transform the behaviour of your pupils. I think you’ll find it’s a bit more complicated than that.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Connectivity&lt;/strong&gt;. One of the Government Digital Service’s design principles is ‘&lt;a href=&quot;https://www.gov.uk/design-principles#second&quot;&gt;do less&lt;/a&gt;’ – they explain, “Government should only do what only government can do”, which is a politically laden view, but I think the same might apply to school tech: school tech should only do what only school tech can do. For me, that means providing faultless, high capacity bandwidth to the point of need. Rent the best (fastest) internet you can; try to avoid paying for additional ‘services’ you don’t want and you won’t use. Make sure that wifi across the site works really well. If you can, provide some safe and secure way for students to keep devices charged during the day, as Moore’s law doesn’t apply to batteries. It’s still quite useful to be able to share one screen with a class so projectors or big screens may well be useful. A webserver of your own, virtual or otherwise,  is quite useful too, assuming you’ve got someone who can make use of it. Think very carefully about spending money on other ed tech, as you can do most of the other things you’d actually want to do for free.&lt;/p&gt;

&lt;p&gt;Try to keep pupils &lt;strong&gt;safe&lt;/strong&gt;. It’s best to teach them to keep themselves safe, but you still want to do what you can to avoid bad things happening. Filter the connection sensibly at the gateway and actively monitor how each account is used. Watch out for additional wifi hotspots appearing in the building which bypass the school’s own filtering and monitoring. Get a clear message across that in school, we use the school wifi not our own SIM. Work with parents to ensure that they’ve activated parental controls on their children’s SIM cards. Good e-safety isn’t just about technical solutions though – it’s much more about character and values. It should be taboo to be accessing ‘inappropriate’ content in school.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Don’t exclude anyone&lt;/strong&gt; – I made the point above, but it needs reiterating – not everyone can afford devices such as these, and allowing BYOD without thinking through how all can be included seems simply wrong – pupil premium funding can help, but don’t assume that the only pupils without a smartphone, tablet or laptop are those entitled to pupil premium funding. Even if BYOD is about permission to bring in a device rather than a requirement to do so, many might feel disadvantaged if they can’t make the most of the opportunity. Perhaps a set of loan devices in the library for any who need them? Chromebooks work very well for this sort of thing, assuming you’ve bought into the GAFE ecosystem and are comfortable with associated privacy issues.&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;These are interesting times. I’ve little doubt that in 10-20 years time this will be as commonplace as bringing your own stationery, calculator or reading book to school is (or was). This seems increasingly  common practice in the independent sector, particularly where boarding is involved, although the social exclusion issue is less of an issue there. It’s already how we do things in HE. Isn’t it time that we recognised that students in schools &lt;em&gt;already&lt;/em&gt; have access to some phenomenal digital technology, and removed the artificial barriers to their using it effectively in school?&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;/2015/12/some-thoughts-on-pupils-bringing-their-own-device-byod/&quot;&gt;Some thoughts on pupils ‘bringing their own device’ (BYOD)&lt;/a&gt; was originally published by Miles Berry at &lt;a href=&quot;&quot;&gt;An open mind&lt;/a&gt; on December 17, 2015.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[#mytechstory]]></title>
  <link rel="alternate" type="text/html" href="/2015/12/mytechstory/" />
  <id>/2015/12/mytechstory</id>
  <published>2015-12-04T19:12:18+00:00</published>
  <updated>2015-12-04T19:12:18+00:00</updated>
  <author>
    <name>Miles Berry</name>
    <uri></uri>
    <email>m.berry@roehampton.ac.uk</email>
  </author>
  <content type="html">&lt;p style=&quot;padding-left: 30px;&quot;&gt;
  &lt;em&gt;Originally &lt;a href=&quot;https://www.thetechpartnership.com/inspire/my-tech-story/professional-stories/i-train-future-teachers-to-teach-computing-and-make-the-most-of-technology/&quot;&gt;published&lt;/a&gt; as part of &lt;a href=&quot;https://www.thetechpartnership.com/inspire/my-tech-story/&quot;&gt;a series&lt;/a&gt; by &lt;a href=&quot;https://www.thetechpartnership.com/&quot;&gt;The Tech Partnership&lt;/a&gt;&lt;/em&gt;
&lt;/p&gt;

&lt;figure&gt;&lt;img src=&quot;/wp-content/uploads/2015/12/151116-091748-1024x682.jpg&quot; /&gt;&lt;/figure&gt;

&lt;p&gt;
  I&amp;#8217;m principal lecturer in computing education in the University of Roehampton&amp;#8217;s school of education. Most of my work involves lecturing on our initial teacher training programmes, supporting a new generation of teachers as they train to teach computing and to use  technology to enhance their teaching and their pupils&amp;#8217; learning. I&amp;#8217;m involved with a good number of projects in computing education beyond Roehampton, including the Switched on Computing scheme of work for primary schools, national and international speaking and consultancy and board membership for Naace and Computing At School.
&lt;/p&gt;

&lt;p&gt;Although I’m slightly older than the internet, I got interested in computing very early on: at the age of six, I announced I wanted to be a programmer when I grew up, having been inspired by Ladybird Books’ How it Works: The Computer. My father was something of a geek himself, bringing home an early Sinclair calculator, as well as log tables and slide rules: my interest in technology was certainly linked to my interest in mathematics, but I’m still unsure of which was chicken and which egg.&lt;/p&gt;

&lt;p&gt;
  I learnt to program through the inspiration of the head of maths at my secondary school, bringing in his own computer to teach a few of us BASIC programming, as well as plenty of time exploring, experimenting and playing with the Sinclair ZX81 and BBC Micro at home. I&amp;#8217;ve an O Level in Computer Studies &amp;#8211; creating a graph plotting and linear correlation program for my project work.
&lt;/p&gt;

&lt;p&gt;I studied maths at university, but also: attended first year computer science lectures, learning some functional programming in ML; fell in love with the Mac particularly for computer algebra and DTP; had holiday jobs creating spreadsheet models and maintaining statistical analysis systems in Fortran; and did some voluntary teaching in a local secondary school. Perhaps surprisingly, it was the teaching that I pursued as my career, staying on for a PGCE and then spending eighteen years working across four schools.&lt;/p&gt;

&lt;p&gt;
  As well as looking after the ICT curriculum in most of these places, I also ran or managed the techie side of the network: these days, it&amp;#8217;s unusual to combine both roles, but this meant we could do some pioneering things in web development, virtual learning environments, blogging and thin-client networks.
&lt;/p&gt;

&lt;p&gt;I moved into higher education back in 2010. The beginning teachers I work with are great people: with them, there’s such a sense of teaching as a vocation, a desire to do all they can for those in their care, and the curiosity, courage and creativity that will make them great role models for their pupils. I still get to do some geeky things, including some work as technical lead for a EU art/blogging project with partner universities in Finland, Czech Republic, Portugal, Spain and Ireland and developing a bespoke blogging / eportfolio platform for our students.&lt;/p&gt;

&lt;p&gt;The last four years have seen a massive shift from ICT to Computing in both primary and secondary schools, and it’s been my privilege to be part of this process, through early work developing Switched on ICT and Computing At Schools’s Computer Science curriculum, then as part of the drafting panel for computing on England’s national curriculum, and subsequently through a number of the support, training and implementation projects, such as Switched on Computing, QuickStart Computing, Barefoot Computing and Code Club Pro.&lt;/p&gt;

&lt;p&gt;
  The new curriculum is an unashamedly ambitious one, seeking to equip pupils with computational thinking and creativity so they can understand and change the world. There are though big challenges here, not least ensuring that teachers have the subject knowledge they need so they can teach this subject confidently and effectively.
&lt;/p&gt;

&lt;p&gt;What interests me now is researching how programming and other aspects of computer science are best taught or learnt in school: we’ve evidence from the early days of Logo programming in schools, and present day work with undergraduate computer science students, but we’re gradually developing the teaching profession’s shared expertise in effective classroom. I’m also rediscovering my statistical background, getting interested in data mining, machine learning and predictive analytics in the context of education, and gradually getting to grips with analysis and programming in the utterly fab R.&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;/2015/12/mytechstory/&quot;&gt;#mytechstory&lt;/a&gt; was originally published by Miles Berry at &lt;a href=&quot;&quot;&gt;An open mind&lt;/a&gt; on December 04, 2015.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[&#8216;This House believes 21st Century skills aren’t being taught  &#8211; and they should be&#8217;]]></title>
  <link rel="alternate" type="text/html" href="/2015/12/this-house-believes-21st-century-skills-arent-being-taught-and-they-should-be/" />
  <id>/2015/12/this-house-believes-21st-century-skills-arent-being-taught-and-they-should-be</id>
  <published>2015-12-03T18:12:54+00:00</published>
  <updated>2015-12-03T18:12:54+00:00</updated>
  <author>
    <name>Miles Berry</name>
    <uri></uri>
    <email>m.berry@roehampton.ac.uk</email>
  </author>
  <content type="html">&lt;p style=&quot;padding-left: 30px;&quot;&gt;
  &lt;em&gt;I found myself invited to &lt;a href=&quot;http://www.online-educa.com/&quot;&gt;Online Educa Berlin&lt;/a&gt; to speak with &lt;a href=&quot;https://twitter.com/allanpall&quot;&gt;Allan Päll&lt;/a&gt; &lt;strong&gt;against&lt;/strong&gt; the above motion. Which we defeated! Here&amp;#8217;s what I said.&lt;/em&gt;
&lt;/p&gt;

&lt;h2 id=&quot;what-is-education-for&quot;&gt;What is education for?&lt;/h2&gt;

&lt;p&gt;I’d like to begin by moving back from the motion, to think about what education is &lt;em&gt;for&lt;/em&gt;. To do that, we need some understanding of what education &lt;em&gt;is&lt;/em&gt;. I’ve been ‘in’ education for over forty years now, but even so, I checked. It’s&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“The culture or development of personal &lt;em&gt;knowledge&lt;/em&gt; or &lt;em&gt;understanding&lt;/em&gt;, growth of &lt;em&gt;character&lt;/em&gt;, moral and social qualities, etc., &lt;em&gt;as contrasted with&lt;/em&gt; the imparting of skill.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;There’s definitely a place for imparting skills but that’s &lt;em&gt;training&lt;/em&gt; not &lt;em&gt;education.&lt;/em&gt; Andthere is a difference. My Roehampton students study education, but they’re trained to teach. England’s new computing curriculum educates pupils about the principles of computer science, whereas we used to train them to use Office software. Or think about sex. No. Not like that. We, rightly,  include sex education on the curriculum in schools but we don’t typically include &lt;em&gt;training.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In England, our education act says what education is for:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;firstly to promote the spiritual, moral, cultural, mental and physical development of pupils &lt;em&gt;and of society&lt;/em&gt;, and&lt;/li&gt;
  &lt;li&gt;to prepare pupils for the opportunities, responsibilities and experiences of later life.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;What else could education possibly be for than that? You’ve just got to love laws that require you to do what you’d want to do anyhow.&lt;/p&gt;

&lt;p&gt;There remains a question about how &lt;em&gt;best&lt;/em&gt; to prepare pupils for these ‘opportunities, responsibilities and experiences’. &lt;strong&gt;The nub of our motion this evening is about whether this should be done through some sort of training in 21st century skills or by passing on the knowledge, understanding and wisdom of our generation to the next&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;on-skills&quot;&gt;On skills.&lt;/h2&gt;

&lt;p&gt;I’ve no problem with skills per se.  In teaching, ‘behaviour management’ is a skill. Coding is a skill. So is searching for things on Google.&lt;/p&gt;

&lt;p&gt;I have some problem though with the notion that there are  ‘21st century’ skills, but Allan did a fine job already of demolishing that notion.&lt;/p&gt;

&lt;p&gt;I’ve also some problem with the notion that skills &lt;em&gt;transfer.&lt;/em&gt; Skills are about accomplishing &lt;em&gt;something&lt;/em&gt;. There’s a context to skills, and I think we diminish specific skills by attempting to generalise them:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;It’s not ‘critical thinking’: it’s thinking critically &lt;em&gt;about something&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;It’s not ‘creativity’: it’s creating &lt;em&gt;something&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;It’s not ‘communication’: it’s communicating &lt;em&gt;something&lt;/em&gt;, through &lt;em&gt;some medium&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The something here &lt;em&gt;matters&lt;/em&gt;. It’s really not possible to teach ‘skills’ in an abstract fashion without context, and the context is king. Whatever the &lt;em&gt;specific&lt;/em&gt; domain, knowledge of that domain is necessary for expert skill.&lt;/p&gt;

&lt;p&gt;My main problem is that we’ve only a little time in school, we’ve other things to teach, and our students have other things to learn: things like knowledge, understanding and wisdom. W_ithout these,_ skills are unlikely to be of much practical benefit.&lt;/p&gt;

&lt;h2 id=&quot;knowledge-understanding-and-wisdom&quot;&gt;Knowledge, understanding and wisdom&lt;/h2&gt;

&lt;p&gt;Nodding in the direction of Steven Downes, I’d say learning is about connecting things – neurons, ideas and people. The computer scientists get this: Google’s Page Rank algorithm relies not so much on the content of a page as the links between the pages.&lt;/p&gt;

&lt;p&gt;The thing is, the new stuff has to be connected &lt;em&gt;to&lt;/em&gt; something. Otherwise, it’s just isolated factoids: we can’t make sense of it; we can’t use new knowledge unless it’s integrated into our existing schema. Put simply [, background knowledge is the schema that allows you to make sense of new knowledge. More simply: ] it takes knowledge to gain knowledge.&lt;/p&gt;

&lt;p&gt;This applies to each of us as individuals, but it’s also how civilisation grows – human achievement is a cumulative thing. New knowledge doesn’t normally contradict what’s gone before, it builds on it. If Newton saw further than others had, it was because he stood on the shoulders of giants. What hope would there be for the next generation if they had to discover &lt;em&gt;everything&lt;/em&gt; afresh for themselves?&lt;/p&gt;

&lt;p&gt;A consequence of our building on what’s gone before, is that the pace of cultural, scientific and technological change accelerates exponentially. But even allowing for this acceleration, It’s knowledge, understanding and wisdom which stand the test of time, less so skills. Expect new inventions and discoveries over the next 85 years, and new practical skills to go with them, but &lt;em&gt;don’t&lt;/em&gt; expect the foundational shared knowledge of our civilisation to become irrelevant – indeed it’s on this very foundation that new knowledge will be built.&lt;/p&gt;

&lt;p&gt;It’s not 21st century skills that young people need: it’s 21st century knowledge, understanding and wisdom.&lt;/p&gt;

&lt;h2 id=&quot;englands-computing-curriculum&quot;&gt;England’s computing curriculum&lt;/h2&gt;

&lt;p&gt;Time, I think, for a quick case study.&lt;/p&gt;

&lt;p&gt;The most successful education systems, and the top universities seem to organise curriculum around, well, knowledge-based subjects. England’s new national curriculum is quite explicitly a knowledge-based one. It sets out to provide pupils with ‘an introduction to the &lt;em&gt;essential knowledge&lt;/em&gt; they need to be educated citizens and to introduce them to the best that has been thought and said.’&lt;/p&gt;

&lt;p&gt;One of the most radical things we’ve done, in a curriculum many see as rather reactionary, is to replace the old ICT with a new subject, computing. This includes an introduction to the principles of computer science for all, from age five up. It’s been my privilege to be part of the team designing and implementing this new subject.&lt;/p&gt;

&lt;p&gt;Under the old curriculum, we offered a good grounding in technology skills – finding things online, making a presentation, typing up stories, articles and reports, sometimes even making a spreadsheet (Often about planning a party, it seemed. Do people really use spreadsheets to plan parties? Are these fun parties?). It was fine. Pupils moved on to work or the next phase of education with some competence and confidence, and broadly speaking were ‘digitally literate’. Our audit of new students at Roehampton suggested that, across a broad portfolio of tech skills, nearly two thirds regarded themselves as competent, proficient or expert.&lt;/p&gt;

&lt;p&gt;That said, it was all too often a bit, well, dull. There’s a limit (or at least there should be) to the number of times you can find something out on the internet and make a presentation about it. Generally, it did precious little to provide any real knowledge or understanding of computation, information theory or digital technology. In the same audit, less than 15% of my new students rated their &lt;em&gt;understanding&lt;/em&gt; of digital technology as competent, proficient or expert.&lt;/p&gt;

&lt;p&gt;So we started again. We built on the idea of computing as having three elements: computer science, IT and digital literacy: the foundations, applications and implications of the discipline. We took a leaf out of William Morris’s book: ‘Have nothing in your houses that you do not know to be useful, or believe to be beautiful’, and built a curriculum from things that would be useful, and things that were interesting.&lt;/p&gt;

&lt;p&gt;We took a view that the best way to prepare pupils for a future in which digital technology looked likely to remain &lt;em&gt;quite&lt;/em&gt; important was through providing a firm computer science foundation – things like logic, algorithms, abstraction, networks and programming. Yes, coding would be important: not as a vocational skill for the IT industry, but as the lab work of computing – the medium through which the ideas of CS are creatively expressed.&lt;/p&gt;

&lt;p&gt;Computing became part of our curriculum fifteen months ago. It’s early days, but early indications are very positive. Teachers’ professional development has been a challenge. But this hasn’t been about pedagogical or technical skills – teachers know how to teach and know how to use technology. It’s just that they didn’t know much computer science. But they are, by and large, willing to learn, and many are quite enjoying the fresh challenge!&lt;/p&gt;

&lt;h2 id=&quot;character&quot;&gt;Character&lt;/h2&gt;

&lt;p&gt;I don’t want to leave you with the idea that I think ‘knowledge’ is the only thing that matters in education. Of course it isn’t.&lt;/p&gt;

&lt;p&gt;Character matters. I’m talking here about traits and attitudes. Things  such as curiosity, creativity and courage.&lt;/p&gt;

&lt;p&gt;I’ve a four year old daughter. She’s a &lt;em&gt;curious&lt;/em&gt; character. She still has that sense of wonder in the world about her, that sense of ‘wow’ when she sees or hears something new, and still, a willingness to explore, experiment and play. She’s at a great little primary school, and I shouldn’t worry, but I &lt;em&gt;do&lt;/em&gt; worry, that her schooling might get in the way of her curiosity, when it ought to be nurturing this. As Plowden had it in 1967&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“One of the main educational tasks of the primary school is to build on and strengthen children’s intrinsic interest in learning and lead them to learn for themselves”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;But knowledge matters here – it’s as Sophie learns more that, I hope, she’ll want to learn even more. With literacy, &lt;em&gt;motivation&lt;/em&gt; and good wifi, she can teach herself almost anything. And does.&lt;/p&gt;

&lt;p&gt;Creativity matters: we learn not just through listening, reading and exploring but also through making. I don’t think there’s some generic ‘creativity’ skill here, but I’d like my daughter to be creative in her music, in her computing, in her maths and so on. She’s been making things for a while now, but as her &lt;em&gt;knowledge&lt;/em&gt; grows I’m looking forward to her exploring and drawing on that in her creative work.&lt;/p&gt;

&lt;p&gt;Finally, courage. She’s a fearless explorer, with tons of self confidence: I want her school to encourage that. More importantly, I want her to have the courage to tell the truth, to stand up for those who can’t stand up for themselves, to do the &lt;em&gt;right thing&lt;/em&gt; even if it’s not the popular thing.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;So what should we be doing to best prepare young people for the opportunities, responsibilities and experiences of later life?&lt;/p&gt;

&lt;p&gt;Passing on knowledge. Nurturing character. Sounds a bit old-fashioned, but honestly, what better preparation for the rest of the 21st century?&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;/2015/12/this-house-believes-21st-century-skills-arent-being-taught-and-they-should-be/&quot;&gt;&#8216;This House believes 21st Century skills aren’t being taught  &#8211; and they should be&#8217;&lt;/a&gt; was originally published by Miles Berry at &lt;a href=&quot;&quot;&gt;An open mind&lt;/a&gt; on December 03, 2015.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Coding and digital skills]]></title>
  <link rel="alternate" type="text/html" href="/2015/10/coding-and-digital-skills/" />
  <id>/2015/10/coding-and-digital-skills</id>
  <published>2015-10-15T06:35:31+01:00</published>
  <updated>2015-10-15T06:35:31+01:00</updated>
  <author>
    <name>Miles Berry</name>
    <uri></uri>
    <email>m.berry@roehampton.ac.uk</email>
  </author>
  <content type="html">&lt;p style=&quot;padding-left: 30px;&quot;&gt;
  &lt;em&gt;Remarks for &lt;a href=&quot;http://www.ecdl.org/eskillsatschoolevent&quot;&gt;eSkills at Schools event&lt;/a&gt;, European Parliament, Brussels&lt;/em&gt;
&lt;/p&gt;

&lt;p&gt;Just over a year ago, England replaced its old ‘ICT’ curriculum with a curriculum for a new subject, ‘computing’ which placed far greater emphasis on computer science including ‘coding’ than we ever had before. This is pretty radical stuff – mandating that all pupils in local authority schools, aged from 5 to 16, should learn about the principles of computer science alongside digital technology skills.&lt;/p&gt;

&lt;p&gt;It’s still too early to report with any confidence about how successful we’ve been, and indeed changing the curriculum requirements might perhaps be seen as the easiest bit, but there are interesting stories to tell about our journey, and I’m very grateful for this opportunity to do so.&lt;/p&gt;

&lt;h2 id=&quot;rationales&quot;&gt;Rationales&lt;/h2&gt;

&lt;p&gt;Why then set out on this journey? What were the underpinning rationales for our decision to put computer science onto the curriculum for all? I think there were a number of factors here.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Firstly, we have a wish to satisfy children’s inherent &lt;strong&gt;curiosity&lt;/strong&gt; – they use computers and the internet, but too many had at best a sketchy idea of how these things work: putting CS onto the curriculum, alongside digital skills, is in part about ensuring they’ve some reasonably sound idea about what’s happening behind the screen.&lt;/li&gt;
  &lt;li&gt;CS though isn’t just about the technology: it’s about the &lt;strong&gt;principles&lt;/strong&gt; of computation and information that underpin that technology: things like the idea of computability: some problems are easy, some are impossibly hard, and some are quite hard unless you think about them the right way (these, of course, are the really fun ones!).&lt;/li&gt;
  &lt;li&gt;For our ministers, there was also an &lt;strong&gt;economic&lt;/strong&gt; argument – for the UK to maintain vibrant software, games, visual effects, cyber security and fintech industries, we need students studying CS at university, and numbers on these courses looked hard to sustain given the poor experience too many had at school of unambitious curricula and qualifications. Interestingly, Tim Berners-Lee’s argument here was not so much that we need more programmers, but that we need more doctors, lawyers and civil servants who understand code, even if they’re not writing code themselves.&lt;/li&gt;
  &lt;li&gt;There’s also an argument that a CS education is good &lt;strong&gt;preparation&lt;/strong&gt; for an unknown, but plausible tech dominated, future. Few believe that digital technology will play a less important role in our students’ lives than it has in ours, but given Moores’s Law and seemingly exponential rates of change, an IT curriculum that focussed on the skills needed to use present day tech would be largely irrelevant by the time pupils came to actually applying those skills in the workplace, whereas the foundational principles of CS would stand the test of time – they don’t go out of date, and, more importantly, if you understand these principles, you stand a better chance of making sense of, and being in control of, the tech you find yourself using, both now and in the future.&lt;/li&gt;
  &lt;li&gt;For me though, the most convincing argument is around the nature of a &lt;strong&gt;liberal education&lt;/strong&gt; – that, given the importance of digital technology, of computation and information, in all of our lives, a truly rounded education for the third millennium really ought to include some introduction to the ideas that lie at the heart of these things – an appreciation of code is no less important today than an appreciation of art, of music, of poetry, and just as we learn these things in school through making, so it’s hard to really get to grips with CS without some experience of writing a few programs.&lt;/li&gt;
  &lt;li&gt;One final argument – back in the 70s and 80s Papert and others made strong claims that learning to program (in Logo) wasn’t an end in itself, but was more about giving children &lt;strong&gt;tools to think with&lt;/strong&gt; – that those who learnt to program, started to think about thinking and learn about learning: I think this mirrors the emphasis we now give to computational thinking, more of which later…&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;from-ict-to-computing&quot;&gt;From ICT to Computing&lt;/h2&gt;

&lt;p&gt;Ambitious as England’s new computing curriculum is, I don’t think the old ICT curriculum was really &lt;em&gt;that&lt;/em&gt; bad – we’ve thrown out neither baby nor bathwater in the move from ICT to computing: rather, we’ve recognised that we need to go further still.&lt;/p&gt;

&lt;p&gt;Typically, under the old ICT curriculum, most of our pupils became pretty good at using a range of software on a range of platforms; they could access good quality content for themselves; they were able to use technology to communicate ideas and information effectively; broadly speaking, they were able to keep themselves safe; they were, for at least some values of digital literacy, digitally literate and they had a sound set of digital skills with which to move on to the next phase of their education or to enter the workplace.&lt;/p&gt;

&lt;p&gt;We decided that this wasn’t enough for them. As well as using software, we wanted them to learn to make software themselves. As well as accessing content, we wanted them to work creatively in a range of digital media. As well as communicating online, we wanted them to learn to collaborate online. As well as staying safe, we recognised that they also needed to act responsibly. As well as literacy, we wanted some criticality. As well as digital  skills, we wanted them to have digital knowledge and understanding.&lt;/p&gt;

&lt;h2 id=&quot;beauty-and-utility&quot;&gt;Beauty and Utility&lt;/h2&gt;

&lt;p&gt;With these ambitions in mind, how then do you create a computing curriculum? I think for at least some of us involved in the drafting process, William Morris’s dictum about interior design was something of a touchstone. He wrote:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Have nothing in your houses that you do not know to be useful, or believe to be beautiful.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In curriculum terms, we strove to include things which we knew pupils would find useful – finding things on the web, word processing, planning, making, delivering presentations, spreadsheets for analysing data and modelling systems, creating quality online content. In all the emphasis we’ve had on coding, it’s absolutely crucial not to lose sight of the importance of young people leaving school being able to get useful stuff done on computers. We also though wanted to include things beyond mere utility: the things that we hoped pupils would find &lt;em&gt;interesting.&lt;/em&gt; Things like algorithms, programming, debugging, the workings of computers and the internet, binary representation, Boolean logic: these all have their uses, at least for some, but their inclusion in our curriculum is more about their intrinsic interest than extrinsic utility.&lt;/p&gt;

&lt;h2 id=&quot;cs-it-dl&quot;&gt;CS, IT, DL&lt;/h2&gt;

&lt;p&gt;It would be wrong to see England’s Computing curriculum as being just about coding, or even just about computer science – it’s much more inclusive than that. As Britain’s Royal Society recommended, our curriculum now includes elements of computer science, information technology and digital literacy. One way of thinking about the three strands is as the foundations, the applications and the implications of computing.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Foundations&lt;/strong&gt; (the computer science) would be about the underpinning principles of computer science (logic, algorithms, data structures, abstraction and the like), as well as their practical expression through programming and more generally in computational thinking.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Applications&lt;/strong&gt; (or IT) are about skills in using digital technology to get useful work done, including collecting, managing, analysing and communicating data and information, as well as creative work in a range of digital media.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Implications&lt;/strong&gt; (as one interpretation of digital literacy) are about the critical understanding of the impact of digital technology on individuals and society as well safe, responsible and ethical use. I’d include intellectual property, privacy and security here too.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Take, for example, the question ‘How does Google work?’. In CS, or foundations, terms, this is about big data, the Page Rank algorithm, caching and indexing. In IT (applications) terms, there’s typing your query and clicking the button, but also using advanced queries, filtering results, checking sources and dates and so on. In terms of digital literacy (implications) we’d want to talk about the data built up about each user, filter bubbles, targeted pay per click advertising, possible over-reliance on one source for information and about employing smart, creative people.&lt;/p&gt;

&lt;h2 id=&quot;computational-thinking&quot;&gt;Computational Thinking&lt;/h2&gt;

&lt;p&gt;The golden thread running throughout England’s computing curriculum is ‘computational thinking’. The first sentence of the curriculum document, with only the slightest nod in the direction of the the Theses on Feuerbach says:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;A high-quality computing education equips pupils to use computational thinking and creativity to understand and change the world.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I see these as a pairwise thing – computational thinking is about understanding the world, creativity is about changing the world – at least in the sense of making something original, something that wasn’t there before.&lt;/p&gt;

&lt;p&gt;What then do we mean by computational thinking?&lt;/p&gt;

&lt;p&gt;Jeanette Wing’s definition is a good one:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Computational thinking is taking an approach to solving problems, designing systems and understanding human behaviour that draws on concepts fundamental to computing.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It’s looking at problems and looking at systems in such a way that a computer could help us solve them or understand them. It’s absolutely central to how we’re thinking of computer science education in England, but it’s also hugely relevant to the IT and digital literacy strands of the curriculum too.&lt;/p&gt;

&lt;p&gt;Computational thinking involves a number of concepts. These include&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Logical reasoning&lt;/strong&gt; – computers are deterministic machines and we can confidently predict how they’ll behave given certain programs and certain inputs (well, unless they’re running Windows 8)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Algorithms&lt;/strong&gt; – the sense of a sequence of steps or a set of rules to get something done, as well as an awareness that there may be more than one algorithm for any particular problem, and some algorithms are, in some senses, better than others,&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Decomposition&lt;/strong&gt; – the ability to break big problems down into smaller chunks, solving each of these and then combining them as a solution to the whole&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Generalisation or patterns&lt;/strong&gt; – a willingness to look for solutions to a general class of problems and apply that to a specific situation, and a certain reluctance to re-invent wheels if others have already figured out a good way to solve a similar problem; and&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Abstraction&lt;/strong&gt; – that multilayered way of managing complexity that lets us build and use such incredibly complex machines as modern computers, by not worrying too much about what lies inside particular ‘black boxes’, unless we need to.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These things aren’t &lt;em&gt;just&lt;/em&gt; about programming: it’s not too tricky to see how these help make sense of using computers much more generally than just coding, and indeed how they can apply across the curriculum – there are strong parallels here with mathematical reasoning, the scientific method, design thinking and more general planning and critical reasoning skills.&lt;/p&gt;

&lt;p&gt;Alongside these concepts, we’ve come to recognise that there’s a softer set of approaches which the computational thinker is likely to make use of. For us, the list includes:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Tinkering&lt;/strong&gt; (or experimenting, playing or exploring if you’d rather) – drawing out the curiosity that seems to drive computer scientists, programmers and other geeks into figuring out how things work;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Making&lt;/strong&gt; – a recognition that computing is an essentially creative discipline in which folk are actively engaged in making original things for others to use, or at least they should be;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Debugging&lt;/strong&gt; – that all too often things don’t work as intended, and that rather than running in circles, screaming and shouting, there’s much gained through figuring out what went wrong and then setting about putting it right – we know from Carol Dweck’s work on growth mindsets just how important it is to have a positive attitude to the mistakes we make;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Persevering&lt;/strong&gt; – we acknowledge that programming &lt;em&gt;is&lt;/em&gt; hard, but also that overcoming a challenge is a far more powerful learning experience (and much more fun) than just practising something easy that you can already do; and&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Collaborating&lt;/strong&gt; – software gets written by teams, and being able to contribute positively to a team is absolutely essential for a school leaver wanting to work in the software industry, or indeed any industry.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Again, no one would say these things only matter in computing – these approaches, or their close analogues, are relevant to most fields of endeavour, but I think we’re starting to see computing, perhaps particularly programming, as a great way to nurture these attitudes and approaches in young people.&lt;/p&gt;

&lt;h2 id=&quot;programming-and-ct&quot;&gt;Programming and CT&lt;/h2&gt;

&lt;p&gt;So if England’s curriculum is about developing computational thinking and creativity, why is there so much apparent focus on ‘coding’. Actually, we don’t mention ‘coding’ at all in the programmes of study – we do though talk about programming.&lt;/p&gt;

&lt;p&gt;For me, programming is a two step process – thinking about how to solve the problem, then implementing the solution in a language the machine can understand, so I’d say programming is algorithms plus code.&lt;/p&gt;

&lt;p&gt;Can you have one without the other? Well, yes. We can (and indeed, do) look at algorithms without implementing them – there’s lovely work happening in English schools on ‘unplugged’ approaches to developing computational thinking, such as working out the algorithm (or the recipe) for a jam sandwich. There’s also plenty of resources out there which attempt to teach ‘coding’ without really letting pupils think through the plan and purpose for their code – the ‘paint by numbers’, step-by-step approach to learning to code which, to me, seems much closer to programming pupils than pupils programming.&lt;/p&gt;

&lt;p&gt;The two though do seem to work particularly well hand in hand. Coding is the ‘lab work’, the experimental bench, for computer science: it’s the means through which pupils can see their algorithms come to life, where they can test their ideas out, and where they can make something genuinely useful. Imagine science education without experiments – it’s possible, but it’s likely to be much less effective, and much less fun.&lt;/p&gt;

&lt;p&gt;Coding isn’t the end in itself, but it does seem a particularly effective way to develop the concepts and approaches that we recognise as computational thinking.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;I don’t want to give the impression that England has all this figured out. It’s been a hugely exciting few years, changing a nation’s curriculum in such a significant way and seeing the impact that this is already having on schools, teachers and pupils. We’ve something approaching an alpha release –  a minimum viable product, but there’s plenty more development work still needed, and I suspect we’re never going to have a final, finished product, much more a perpetual cycle of beta versions.&lt;/p&gt;

&lt;p&gt;I worry at times that we’ve emphasised coding too much, sometimes at the expense of computational thinking, but also at the really, really useful e-skills that our learners still need – no one gets a job programming in Scratch, but plenty of folk are likely to have to word process reports, make presentations and develop online content. Some of what follows next for us might well be about restoring the balance to the curriculum as implemented – ensuring that the foundations, applications and implications of computing &lt;em&gt;all&lt;/em&gt; get covered so that our pupils are prepared as well as they possibly can be for the opportunities, responsibilities and experiences of their later life.&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;/2015/10/coding-and-digital-skills/&quot;&gt;Coding and digital skills&lt;/a&gt; was originally published by Miles Berry at &lt;a href=&quot;&quot;&gt;An open mind&lt;/a&gt; on October 15, 2015.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[That OECD computers in schools report]]></title>
  <link rel="alternate" type="text/html" href="/2015/09/that-oecd-computers-in-schools-report/" />
  <id>/2015/09/that-oecd-computers-in-schools-report</id>
  <published>2015-09-22T06:41:45+01:00</published>
  <updated>2015-09-22T06:41:45+01:00</updated>
  <author>
    <name>Miles Berry</name>
    <uri></uri>
    <email>m.berry@roehampton.ac.uk</email>
  </author>
  <content type="html">&lt;p&gt;
    There was much media fuss on Tuesday this week around the publication of the &lt;a href=&quot;http://www.oecd-ilibrary.org/education/students-computers-and-learning_9789264239555-en&quot; target=&quot;_blank&quot;&gt;&lt;span class=&quot;il&quot;&gt;OECD&lt;/span&gt;’s report, Students, Computers and Learning: Making the Connection&lt;/a&gt;. As with many such stories, the headlines don’t entirely reflect the nuance of the report or the broader context. The BBC’s headline, &lt;a href=&quot;http://www.bbc.co.uk/news/business-34174796&quot; target=&quot;_blank&quot;&gt;“Computers ‘do not improve’ pupil results, says &lt;span class=&quot;il&quot;&gt;OECD&lt;/span&gt;”&lt;/a&gt; certainly captured some attention, and, strictly speaking, they’re right &amp;#8211; computers don’t improve pupils’ results, it’s only pupils who can do that.
  &lt;/p&gt;

&lt;p&gt;
    But &lt;i&gt;how&lt;/i&gt; might a pupil go about improving her results? Having an outstanding teacher helps, as would going to a good school, as would living in a country with a great education system. But motivation and self-discipline are going to be part of the picture too: pupils who do well are, by and large, interested in learning things and willing to stick at things when they get difficult. Another thing that might be quite useful is access to knowledge. Textbooks and libraries are good for this, although both are inevitably limited, and both, by the way, are technological artefacts. Computers can help too, particularly if through these the pupil has access to the web: for the motivated and self-disciplined pupil, the web offers (almost) unlimited potential for the pursuit of any academic endeavour. Indeed, &lt;i&gt;even without an outstanding teacher, a good school and a great education system&lt;/i&gt;, the motivated, self-disciplined and connected pupil could still do much to improve her results. Can the&lt;span class=&quot;il&quot;&gt;OECD&lt;/span&gt; really be arguing that computers don&amp;#8217;t help? Well, no. The &lt;span class=&quot;il&quot;&gt;OECD&lt;/span&gt;’s argument is much more about the way computers are being used &lt;i&gt;in&lt;/i&gt; schools, rather than by young people themselves. The &lt;span class=&quot;il&quot;&gt;OECD&lt;/span&gt;’s Andreas Schleicher puts it really very well:
  &lt;/p&gt;

&lt;blockquote&gt;

    &lt;p&gt;
      &lt;i&gt;“School systems need to find more effective ways to integrate technology into teaching and learning to provide educators with learning environments that support 21st century pedagogies and provide children with the 21st century skills they need to succeed in tomorrow’s world. Technology is the only way to dramatically expand access to knowledge. To deliver on the promises technology holds, countries need to invest more effectively and ensure that teachers are at the forefront of designing and implementing this change”&lt;/i&gt;
    &lt;/p&gt;

&lt;/blockquote&gt;

&lt;p&gt;
    I think he’s pretty much right.
  &lt;/p&gt;

&lt;p&gt;
    That said, I do have some concerns about &lt;span class=&quot;il&quot;&gt;OECD&lt;/span&gt;’s research here.
  &lt;/p&gt;

&lt;ul&gt;
    &lt;li&gt;
      As is often the case in education, there’s the danger that that which we measure becomes that which we value. Whilst Andreas Schleicher speaks eloquently of ‘21st century skills’, but it’s not obvious how PISA’s tests measure these, whatever they may be. Of course mathematics and literacy &lt;i&gt;matter&lt;/i&gt;, but so do being able to find things quickly and with a degree of discernment on Google, being able to collaborate on a project, being able to teach yourself something new, etc. So does the courage to stand up for what you know to be right. I don&amp;#8217;t think these things come up very often in PISA questions.
    &lt;/li&gt;
    &lt;li&gt;
      Even the inclusion of data on ‘digital reading’ here is rather too narrow: wouldn’t it have been great if &lt;span class=&quot;il&quot;&gt;OECD&lt;/span&gt; had managed to capture something of the richness of creativity or ‘making’ across a range of digital media (code, photography, animation, text etc). It&amp;#8217;s much harder to measure such things, I know, which is perhaps why they didn’t.
    &lt;/li&gt;
    &lt;li&gt;
      This report, as with PISA, paints too broad a picture &amp;#8211; grouping things by country is useful for &lt;span class=&quot;il&quot;&gt;OECD&lt;/span&gt;’s members, but less helpful for teachers, for whom an analysis of the variation between pupils rather than between countries would be more helpful.
    &lt;/li&gt;
    &lt;li&gt;
      From what I hear, there’s some great practice going on with technology in schools in some of the countries not included in the &lt;span class=&quot;il&quot;&gt;OECD&lt;/span&gt; study: places such as Canada, the USA, the UK…
    &lt;/li&gt;
  &lt;/ul&gt;

&lt;p&gt;
    That said, there’s much that we can learn from the report as it stands, and I&amp;#8217;d like to make a few observations:
  &lt;/p&gt;

&lt;h3&gt; 1 Not everything works well &lt;/h3&gt;

&lt;p&gt;
    As the report observes, ‘ICT is linked to better student performance only in certain contexts, such as when computer software and Internet connections help to increase study time and practice.’ It’s clear that education systems that invest heavily in ICT don’t perform appreciably better in PISA tests. An awful lot of money still gets spent on overpriced hardware and software, with little attention paid to evaluating the impact of such investments with anything approach rigour (tablets, whiteboards, anyone?). Whilst not without its problems, schools could save much by allowing pupils to bring and use their own devices, which they are already moderately skilled at using. Similarly there’s little need to pay for software when we’ve got great open source software and free online tools (Google Apps for Education, Scratch…).
  &lt;/p&gt;

&lt;h3&gt; 2 Use technology to support strategies we know work &lt;/h3&gt;

&lt;p&gt;
    According to the report, “In the end, technology can amplify great teaching, but great technology cannot replace poor teaching.” For pupils who, through no fault of their own, have to put up with poor teaching, technology (books, libraries, the web) may be the only help they can get, but yes, using technology well in school is about using it to promote those practices which we know to be effective. As John Hattie argues in Visible Learning, “The biggest effects on student learning occur when … students become their own teachers.” Textbooks, libraries and web make this possible. The Education Endowment Foundation’s Toolkit lists feedback, meta-cognition, peer tutoring and collaborative learning as four of the most effective things a school can do to raise outcomes &amp;#8211; none of these &lt;i&gt;need&lt;/i&gt; computers, but it’s not hard to see how computers can be used very effectively to support these strategies. Interstingly, the EEF rate ‘digital technology’ as a moderately effective intervention (with an effect size of four months progress). EEF observe ‘technology should be used to supplement other teaching, rather than replace more traditional approaches,’ whereas the &lt;span class=&quot;il&quot;&gt;OECD&lt;/span&gt; report indicates ‘technology can support new pedagogies that focus on learners as active participants with tools for inquiry-based pedagogies and collaborative workspaces.’ Perhaps we need both?
  &lt;/p&gt;

&lt;h3&gt; 3 Digital skills do matter &lt;/h3&gt;

&lt;p&gt;
    The report reveals a high correlation between ‘digital reading’ scores and both ‘print reading’ and paper-based mathematics scores. This isn’t surprising, and the report acknowledges the importance of digital skills alongside literacy
  &lt;/p&gt;

&lt;p&gt;
    &lt;i&gt;“Students who have not acquired basic skills in reading, writing and navigating through a digital landscape will find themselves unable to participate fully in the economic, social and cultural life around them.”&lt;/i&gt;
  &lt;/p&gt;

&lt;p&gt;
    Interestingly, Korea and Singapore (countries it’s been my priviledge to visit this last year) scored top on ‘digital reading’, even though they report relatively infrequent use of ICT in school to &lt;span class=&quot;il&quot;&gt;OECD&lt;/span&gt;. However, both countries “have excellent broadband infrastructure, and their 15-year-old students use computers with ease in their daily lives.” I don’t think we can simply assume that all pupils will pick up these digital skills for themselves: they ought really to be taught and practised &amp;#8211; the former, I’d say in computing (née ICT) lessons, the latter across and beyond the curriculum. In Switched on Computing, the BETT and ERA award winning scheme of work I developed for Rising Stars, we try to provide plenty of opportunity for both, recognising that there’s much more to ‘computing’ than coding, and looking for ways in which digital skills can be applied in authentic, meaningful context across the curriculum.
  &lt;/p&gt;

&lt;h3&gt; 4 The digital divide isn&amp;#8217;t what it was, but it&amp;#8217;s still an issue  &lt;/h3&gt;

&lt;p&gt;
    The report has an interesting take on digital divide: the gap in access to computers (and, crucially, the internet) between advantages and disadvantaged students seems to be narrowing, which is good. The UK scores highly in these tables, so well done us. However, there does seem to be a difference around the way computers are used: ‘what students do with computers, from using e-mail to reading news on the Internet, is related to students’ socio-economic background.’ To me this makes an even stronger case for ensuring better, more equitable education in digital skills at school, opening up the horizons of pupils from less advantaged backgrounds: an essential part of what an entitlement to a broad and balanced computing curriculum should include.
  &lt;/p&gt;

&lt;h3&gt; 5 Trust teachers &lt;/h3&gt;

&lt;p&gt;
    I love the bit in the report about teacher agency in relation to technology: “It is vital that teachers become active agents for change, not just in implementing technological innovations, but in designing them too.” For me, some of the best ‘ed tech’ has been that where educators have been directly involved in developing products and projects: for example: Moodle, Scratch, the 100 Word Challenge and the Raspberry Pi. I’m hopeful that, as more teachers in England become confident in teaching computing, we’ll see more putting their skills to good use through developing software themselves, or at lease more willing to get involved in the processes of software development.
  &lt;/p&gt;

&lt;p&gt;
    Finally, I suspect that working out whether or not computers help with education may well be determined as much by our understanding of what education is for as it is by the technologies we use. If education is about passing exams, which haven’t changed &lt;i&gt;that&lt;/i&gt; much since the 19th century, then perhaps computers and the web may have only a small part to play. If, on the other hand, it’s more about preparing pupils for the ‘opportunities, responsibilities and experiences of later life’, then I think the relevance and potential contribution of digital technology is so much greater, and we are obliged to use this as well as we possibly can in our teaching.
  &lt;/p&gt;

&lt;p style=&quot;padding-left: 30px;&quot;&gt;
    &lt;em&gt;Originally published by Education Technology as &lt;a href=&quot;http://edtechnology.co.uk/Article/what-the-oecd-report-really-means&quot;&gt;What the OECD Report Really Means&lt;/a&gt;. © all rights reserved.&lt;/em&gt;
  &lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;/2015/09/that-oecd-computers-in-schools-report/&quot;&gt;That OECD computers in schools report&lt;/a&gt; was originally published by Miles Berry at &lt;a href=&quot;&quot;&gt;An open mind&lt;/a&gt; on September 22, 2015.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Computing: one year on]]></title>
  <link rel="alternate" type="text/html" href="/2015/08/computing-one-year-on/" />
  <id>/2015/08/computing-one-year-on</id>
  <published>2015-08-27T06:45:53+01:00</published>
  <updated>2015-08-27T06:45:53+01:00</updated>
  <author>
    <name>Miles Berry</name>
    <uri></uri>
    <email>m.berry@roehampton.ac.uk</email>
  </author>
  <content type="html">&lt;p style=&quot;padding-left: 30px;&quot;&gt;
  &lt;em&gt;Responses to questions for a round table, reviewing the first year of the English computing curriculum for Education Technology&lt;/em&gt;
&lt;/p&gt;

&lt;p&gt;&lt;em&gt;It’s been almost one year since the computing curriculum was introduced in primary and secondary schools. Have the past 12 months gone as expected? Were there any challenges you didn’t envisage?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In primary, the response has exceeded the expectations of many of us, with primary teachers up and down the country doing great work to get children coding with Scratch and other platforms, develop their understanding of the internet and provide the foundations of computational thinking, due in part to the successes of schemes such as Switched on Computing, Barefoot Computing and QuickStart. The picture in secondary schools is more mixed, I think, with many doing outstanding work and others struggling to recruit or retrain the staff needed to teach this unashamedly ambitious curriculum.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;2.)&lt;/em&gt;   &lt;em&gt;From your experience, what has the education sector learned over the last 12 months, and how has it changed&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In terms of computing, there’s been a clear message about ‘computational thinking’: the concepts such as logic, algorithms, decomposition, abstraction and generalisation which form a golden thread running through thecomputing curriculum. ‘Coding’ is a means to this end, rather than an end in itself: a minority of pupils will find themselves programming in their future careers, but most, if not all, will face occasions when computational thinking will help them to solve problems or understand systems.&lt;/p&gt;

&lt;p&gt;More generally, one of the biggest shifts has been the move towards a greater recognition of the role of evidence and research in education. The work of John Hattie, the Education Endowment Foundation and Tom Bennett’s ResearchEd has done much to make academic, quantitative research accessible to teachers and school leaders, with a consequent challenging of previously held assumptions such as the the efficacy of ‘learning styles’ and ability-based grouping.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;3.)&lt;/em&gt;   &lt;em&gt;How have schools reacted to the change, have they been onboard with it? Do you think they’ve embraced the changes and coped well?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In those areas of the country, such as Islington and Havering, where there’s still highly effective local authority support, the response from schools has been fantastic, with some great targeted CPD and some really creative projects under way. Elsewhere, it’s a mixed picture I think: there are many schools and teachers who’ve risen to the challenge, developing and implementing highly effective schemes of work for the new curriculum, but others wherecomputing, and indeed the other foundation subjects, has been marginalised, often due to school leaders’ perception that Ofsted are only interested in maths and English, rather than the statutory obligation to provide a broad and balanced curriculum.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;4.)&lt;/em&gt;   &lt;em&gt;And what about the students, are they engaging with their new subject?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;By placing computer science on the curriculum, it’s become an entitlement for all pupils (in local authority schools, at least), rather than just the preserve of a geeky or academic few. This is very positive, but brings its own challenges. By making the learning curve for programming very gentle, starting with Bee Bots or their like, then a few years of Scratch in primary schools before students are introduced to text-based programming in Python or something similar, teachers can do much to ensure all their students are engaged with and are achieving in computing, whilst allowing plenty of scope for the brightest and best to work independently in co-curricular provision.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;5.)&lt;/em&gt;   &lt;em&gt;Do teaching professionals now consider the skills the curriculum teaches are important to the future career prospects of children?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The new curriculum is more focussed on developing understanding than it is in equipping pupils with particular tech skills as such, so that students will be able to make good use of (and think critically about) the technology that will be around after they leave school. Whilst few, if any, will get jobs programming in Scratch, many will find themselves doing some programming at university and beyond, and most will find that an understanding of how programs are written and how computers operate and communicate will be very useful&lt;/p&gt;

&lt;p&gt;&lt;em&gt;6.)&lt;/em&gt;   &lt;em&gt;From what we’ve seen over the past 12 months, what changes can we make going into the next academic year to ensure students get the most out of the new curriculum? What could we be doing better?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Firstly, making sure that every school is teaching computing as part of a broad, balanced curriculum, and that qualifications such as GCSE computing are offered in every school to every student who’d like to pursue them. I’d also like to see that schools teach the whole of the computing curriculum – there’s much more to computer science than ‘coding’, and there’s much more to computing than just the computer science bits. Whilst I welcome the renewed focus on the foundations, it’s also important that pupils can apply technology to solving problems, and consider critically the implications of technology for themselves and others.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;© all rights reserved&lt;/em&gt;&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;/2015/08/computing-one-year-on/&quot;&gt;Computing: one year on&lt;/a&gt; was originally published by Miles Berry at &lt;a href=&quot;&quot;&gt;An open mind&lt;/a&gt; on August 27, 2015.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Debugging and the growth mindset]]></title>
  <link rel="alternate" type="text/html" href="/2015/07/debugging-and-the-growth-mindset/" />
  <id>/2015/07/debugging-and-the-growth-mindset</id>
  <published>2015-07-20T16:49:51+01:00</published>
  <updated>2015-07-20T16:49:51+01:00</updated>
  <author>
    <name>Miles Berry</name>
    <uri></uri>
    <email>m.berry@roehampton.ac.uk</email>
  </author>
  <content type="html">&lt;p&gt;How good are your pupils at rising to a challenge? When they encounter something difficult, do they show grit in persevering, or do they give up easily? Given a choice, would they choose to tackle easier or harder work? How do they cope when they fail?&lt;/p&gt;

&lt;p&gt;In extra-curricular activities such as music, sport and computer games, the difficulty seems part of the appeal: much that attracts children to these sorts of pursuits comes through the sense of achievement that follows persevering and eventually succeeding at something which previously seemed really hard. As Kennedy said of the space programme: we choose to do these things not because they are easy, but because they are hard.&lt;/p&gt;

&lt;p&gt;Within the curriculum, there’s evidence that challenge, overcoming difficulties and learning from mistakes can have a very positive impact on outcomes overall. It’s the activities that make learners think that best support long-term retention, and these seem more likely to be the hard ones than the easy ones. &lt;a href=&quot;https://www.tes.co.uk/article.aspx?storycode=6005411&quot;&gt;John Hattie has argued&lt;/a&gt; that it’s the teacher’s job to make work &lt;em&gt;hard&lt;/em&gt; for pupils, because it’s only then that pupils make mistakes, and it’s only when pupils make mistakes that feedback becomes useful. Carol Dweck suggests that those with a ‘growth mindset’ welcome making mistakes, seeing these as precursors of knowledge and essential for learning. In EYFS, the &lt;a href=&quot;http://www.foundationyears.org.uk/files/2012/03/Development-Matters-FINAL-PRINT-AMENDED.pdf&quot;&gt;characteristics of effective learning&lt;/a&gt; include paying attention to detail, persisting with activities when challenges occur, and finding ways to solve problems: learning in computing (and other subjects) further up the school ought to build on this foundation.&lt;/p&gt;

&lt;p&gt;Making mistakes when programming computers is almost inevitable. There’s a lovely story of &lt;a href=&quot;https://en.wikipedia.org/wiki/Grace_Hopper&quot;&gt;Grace Hopper&lt;/a&gt;, one of the first computer programmers, fixing a computer by removing a moth (or as Americans would say, a ‘bug’) from the relay switches out of which ancient processors were built. We still talk of mistakes in algorithms and code as ‘bugs’ and the process of fixing these as ‘debugging’. The programs pupils write, just like those developed by Microsoft and Google, will contain bugs: neither you nor your pupils should be surprised by this; indeed it’s best to welcome this as an opportunity for paying attention to detail, for understanding code better and for becoming a more skilful programmer. Back in the early days of &lt;a href=&quot;http://www.calormen.com/jslogo/&quot;&gt;Logo&lt;/a&gt; programming in schools, &lt;a href=&quot;https://books.google.co.uk/books?id=HhIEAgUfGHwC&amp;amp;lpg=PP1&amp;amp;dq=papert%20mindstorms%201980&amp;amp;pg=PA23#v=onepage&amp;amp;q&amp;amp;f=false&quot;&gt;Seymour Papert argued&lt;/a&gt; that it’s better to ask whether a program is fixable rather than whether it’s right or wrong, and that the strategies which pupils applied to debugging their Logo scripts could transfer to dealing with mistakes more positively in the rest of the curriculum.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.gov.uk/government/publications/national-curriculum-in-england-computing-programmes-of-study/national-curriculum-in-england-computing-programmes-of-study&quot;&gt;The new computing curriculum&lt;/a&gt; places a lot of emphasis on debugging. In key stage 1, pupils are taught to create and debug simple programs. In key stage 2, they learn to use logical reasoning to detect and correct errors in algorithms and programs. ‘Logical reasoning’ matters: it’s not enough just to get someone else to fix a program, or fix it by dragging random blocks around until something works. Pupils should be able to explain why their program didn’t work, and why their fix worked. It’s important that pupils become self-reliant in their debugging – they’re not likely to learn much programming, and certainly not how to debug their code, if you, or a fellow pupil, is always there to fix things for them: step away from the mouse, remind them the computer isn’t out to get them, and encourage a positive attitude to solving hard problems.&lt;/p&gt;

&lt;p&gt;There are a number of strategies on which pupils can draw when debugging their programs. Whilst some pupils might well figure these out for themselves, it’s likely to be more effective to teach these, as well as providing plenty of opportunity to put these into practice.&lt;/p&gt;

&lt;p&gt;One technique is called ‘&lt;a href=&quot;https://en.wikipedia.org/wiki/Rubber_duck_debugging&quot;&gt;rubber ducking&lt;/a&gt;’ – give pupils a yellow rubber duck in computing lessons, when their programs go wrong, they should explain to the duck what their program was meant to do, and what it actually does. Often, simply articulating their plan and the results like this can help pupils spot and then fix the bug. If not, explaining to the duck what happens on each line or in each block of code might be enough. This is similar to the approach we suggested in &lt;a href=&quot;http://barefootcas.org.uk/&quot;&gt;Barefoot Computing&lt;/a&gt;: first predict what should happen, then find out exactly what does happen. Use this to work out where something has gone wrong, and then fix it! Barefoot Computing also advocates a debug early, debug often approach, testing and fixing code as it gets written, rather than waiting until the whole of a complex program is written and then dealing with debugging.&lt;/p&gt;

&lt;p&gt;‘&lt;a href=&quot;http://coreygoldberg.blogspot.co.uk/2008/12/wolf-fence-debugging.html&quot;&gt;Wolf fencing&lt;/a&gt;’ draws on an analogy with finding a wolf in the forest by building a fence, and then listening to hear from which side the wolf howls, then cut that region in half with another fence, and then that one, and so on until the wolf is found. With programs, get pupils to work out which section of the code has the bug, then which part of that section, and so on. This sort of ‘&lt;a href=&quot;https://en.wikipedia.org/wiki/Divide_and_conquer_algorithms&quot;&gt;divide and conquer&lt;/a&gt;’ algorithm is used a lot in computing.&lt;/p&gt;

&lt;p&gt;It’s worth making pupils aware of the range of different sorts of bugs that they might encounter when programming. Logic bugs can often be hard to find, as they are more likely to come from errors in algorithms rather than code – perhaps because these haven’t been thought through carefully enough. In &lt;a href=&quot;https://scratch.mit.edu/&quot;&gt;Scratch&lt;/a&gt; and similar languages, multithreading bugs are not uncommon, as one sprite gets out of sync with another or reacts to input intended for another: broadcast signals might help here. Sometimes programs work, but work too slowly – performance can sometimes be improved by removing unnecessary calculations, reducing precision or by thinking of a more efficient algorithm. Arithmetic bugs through dividing by zero can be avoided with a little care, as can rounding errors with a bit more care. Some of the hardest bugs to deal with arise out of not understanding quite how the language or even the hardware works: Googling error messages, or even reading the manual, helps.&lt;/p&gt;

&lt;p&gt;Once pupils start working with text based programming languages such as &lt;a href=&quot;https://www.touchdevelop.com/&quot;&gt;TouchDevelop&lt;/a&gt; or &lt;a href=&quot;https://trinket.io/&quot;&gt;Python&lt;/a&gt;, syntax errors become common, which is one way to emphasise the importance of spelling, punctuation and grammar in code! Attention to detail will help here, and the interpreter or compiler usually provides an error message with some detail of what went wrong and what the error is. These messages can seem terse and cryptic, but they’re meant to be helpful so encourage pupils to read these carefully. Googling the error message helps here too.&lt;/p&gt;

&lt;p&gt;As well as letting pupils debug their own code, there’s a case for giving them debugging exercises – give them &lt;a href=&quot;https://trinket.io/library/trinkets/2da63b4823&quot;&gt;some buggy code&lt;/a&gt;, and set them the challenge of getting it working as it should. Or, as &lt;a href=&quot;https://teachcomputing.wordpress.com/2013/11/23/sabotage-teach-debugging-by-stealth/&quot;&gt;Alan O’Donohoe recommends&lt;/a&gt;, get them to sabotage one another’s code, swapping seats to introduce say five bugs and then swapping back as the original programmer gets on with debugging. It’s quite alright to make deliberate (or otherwise) mistakes when you’re teaching pupils programming, but make the most of the opportunity this offers to teach debugging. Anything you can do to make debugging seem an intrinsic part of the challenge and the fun of programming is likely to help, and might even make it easier for pupils to apply these lessons to mistakes in other work.&lt;/p&gt;

&lt;p style=&quot;padding-left: 30px;&quot;&gt;
  &lt;em&gt;Originally published in &lt;a href=&quot;http://www.teachprimary.com/&quot;&gt;Teach Primary&lt;/a&gt; 9.5 as Working out the Bugs. Reproduced here with permission. © all rights reserved.&lt;/em&gt;
&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;/2015/07/debugging-and-the-growth-mindset/&quot;&gt;Debugging and the growth mindset&lt;/a&gt; was originally published by Miles Berry at &lt;a href=&quot;&quot;&gt;An open mind&lt;/a&gt; on July 20, 2015.&lt;/p&gt;</content>
</entry>

</feed>
